/*
Author: Stefan Koehler ( http://www.soocs.de )
Description: SQL script for installing the YaASHs objects in the repository database
Use at your own risk!
*/

-- WHENEVER SQLERROR EXIT SQL.SQLCODE
SET ECHO OFF
SET VERIFY OFF

prompt Database user yaashsr will be dropped (if it already exists) and created
accept OK_PROMPT prompt "Press any key to continue ..."
accept YAASHS_PASS default yaashsr prompt "Please enter the yaashsr user password (default yaashsr): "
accept YAASHS_TBS  default users prompt "Please enter the default tablespace for user yaashsr (default users): "

---------------------------------------------------------------------------------------------
-- (Re-)Create user
---------------------------------------------------------------------------------------------
DROP USER yaashsr CASCADE;
CREATE USER yaashsr IDENTIFIED BY &YAASHS_PASS DEFAULT TABLESPACE &YAASHS_TBS;
ALTER USER yaashsr QUOTA UNLIMITED ON &yaashs_tbs;

---------------------------------------------------------------------------------------------
-- Permissions
---------------------------------------------------------------------------------------------
GRANT CREATE DATABASE LINK TO yaashsr;
GRANT CREATE JOB TO yaashsr;
GRANT CREATE SESSION TO yaashsr;
GRANT CREATE VIEW TO yaashsr;
GRANT EXECUTE ON dbms_lock TO yaashsr;
GRANT RESOURCE TO yaashsr;
GRANT SELECT ON gv_$session TO yaashsr;
GRANT SELECT ON v_$event_name TO yaashsr;
GRANT SELECT ON v_$instance TO yaashsr;
GRANT SELECT ON v_$waitstat TO yaashsr;
GRANT SELECT ON dba_objects TO yaashsr;
GRANT SELECT ON dba_users TO yaashsr;

---------------------------------------------------------------------------------------------
-- Tables & Synonyms
---------------------------------------------------------------------------------------------
CREATE TABLE yaashsr.advanced_view_def (
    version         VARCHAR2(17) NOT NULL,
    view_definition CLOB NOT NULL
);

CREATE TABLE yaashsr.col_mapping (
    version    VARCHAR2(17) NOT NULL,
    type       VARCHAR(8) NOT NULL,
    col_sess   VARCHAR2(1500) NOT NULL,
    col_ashs   VARCHAR2(1500) NOT NULL,
    constraint check_type CHECK (type IN ('STANDARD','ADVANCED'))
);

CREATE TABLE yaashsr.configuration (
    name  VARCHAR2(80) NOT NULL,
    value VARCHAR2(20) NOT NULL
);

CREATE TABLE yaashsr.messages (
    time    DATE NOT NULL,
    stack   VARCHAR2(4000) NOT NULL,
    message VARCHAR2(4000) NOT NULL
);

CREATE TABLE yaashsr.targets (
    name            VARCHAR2(128) NOT NULL,
    dbid            NUMBER NOT NULL,
    is_pluggable    VARCHAR2(6) NOT NULL,
    is_rac          VARCHAR2(3) NOT NULL,
    host_name       VARCHAR2(64) NOT NULL,
    listener_port   NUMBER NOT NULL,
    instance_number NUMBER NOT NULL,
    service_name    VARCHAR2(64) NOT NULL,
    instance_name   VARCHAR2(16),
    db_link_name    VARCHAR2(128) NOT NULL,
    status          VARCHAR2(11) NOT NULL,
    sampling_type   VARCHAR(8) NOT NULL,
    constraint      check_is_pluggable CHECK (is_pluggable IN ('NONCDB','CDB','PDB')),
    constraint      check_is_rac CHECK (is_rac IN ('YES','NO')),
    constraint      check_status CHECK (status IN ('ADDED','DESCHEDULED','DISABLED','ENABLED')),
    constraint      check_sampling_type CHECK (sampling_type IN ('STANDARD','ADVANCED'))
);

-- GV$SESSION structure from Oracle version 10.2.0.5
CREATE TABLE yaashsr.gv$session_src_10205 (
---- Additional columns NAME and DBID for YaASHs
    "NAME"                      VARCHAR2(128) NOT NULL,
    "DBID"                      NUMBER,
---- Original columns of GV$SESSION
    "INST_ID"                   NUMBER,
    "SADDR"                     RAW(8),
    "SID"                       NUMBER,
    "SERIAL#"                   NUMBER,
    "AUDSID"                    NUMBER,
    "PADDR"                     RAW(8),
    "USER#"                     NUMBER,
    "USERNAME"                  VARCHAR2(30),
    "COMMAND"                   NUMBER,
    "OWNERID"                   NUMBER,
    "TADDR"                     VARCHAR2(16),
    "LOCKWAIT"                  VARCHAR2(16),
    "STATUS"                    VARCHAR2(8),
    "SERVER"                    VARCHAR2(9),
    "SCHEMA#"                   NUMBER,
    "SCHEMANAME"                VARCHAR2(30),
    "OSUSER"                    VARCHAR2(30),
    "PROCESS"                   VARCHAR2(12),
    "MACHINE"                   VARCHAR2(64),
    "PORT"                      NUMBER,
    "TERMINAL"                  VARCHAR2(30),
    "PROGRAM"                   VARCHAR2(48),
    "TYPE"                      VARCHAR2(10),
    "SQL_ADDRESS"               RAW(8),
    "SQL_HASH_VALUE"            NUMBER,
    "SQL_ID"                    VARCHAR2(13),
    "SQL_CHILD_NUMBER"          NUMBER,
    "PREV_SQL_ADDR"             RAW(8),
    "PREV_HASH_VALUE"           NUMBER,
    "PREV_SQL_ID"               VARCHAR2(13),
    "PREV_CHILD_NUMBER"         NUMBER,
    "PLSQL_ENTRY_OBJECT_ID"     NUMBER,
    "PLSQL_ENTRY_SUBPROGRAM_ID" NUMBER,
    "PLSQL_OBJECT_ID"           NUMBER,
    "PLSQL_SUBPROGRAM_ID"       NUMBER,
    "MODULE"                    VARCHAR2(48),
    "MODULE_HASH"               NUMBER,
    "ACTION"                    VARCHAR2(32),
    "ACTION_HASH"               NUMBER,
    "CLIENT_INFO"               VARCHAR2(64),
    "FIXED_TABLE_SEQUENCE"      NUMBER,
    "ROW_WAIT_OBJ#"             NUMBER,
    "ROW_WAIT_FILE#"            NUMBER,
    "ROW_WAIT_BLOCK#"           NUMBER,
    "ROW_WAIT_ROW#"             NUMBER,
    "LOGON_TIME"                DATE,
    "LAST_CALL_ET"              NUMBER,
    "PDML_ENABLED"              VARCHAR2(3),
    "FAILOVER_TYPE"             VARCHAR2(13),
    "FAILOVER_METHOD"           VARCHAR2(10),
    "FAILED_OVER"               VARCHAR2(3),
    "RESOURCE_CONSUMER_GROUP"   VARCHAR2(32),
    "PDML_STATUS"               VARCHAR2(8),
    "PDDL_STATUS"               VARCHAR2(8),
    "PQ_STATUS"                 VARCHAR2(8),
    "CURRENT_QUEUE_DURATION"    NUMBER,
    "CLIENT_IDENTIFIER"         VARCHAR2(64),
    "BLOCKING_SESSION_STATUS"   VARCHAR2(11),
    "BLOCKING_INSTANCE"         NUMBER,
    "BLOCKING_SESSION"          NUMBER,
    "SEQ#"                      NUMBER,
    "EVENT#"                    NUMBER,
    "EVENT"                     VARCHAR2(64),
    "P1TEXT"                    VARCHAR2(64),
    "P1"                        NUMBER,
    "P1RAW"                     RAW(8),
    "P2TEXT"                    VARCHAR2(64),
    "P2"                        NUMBER,
    "P2RAW"                     RAW(8),
    "P3TEXT"                    VARCHAR2(64),
    "P3"                        NUMBER,
    "P3RAW"                     RAW(8),
    "WAIT_CLASS_ID"             NUMBER,
    "WAIT_CLASS#"               NUMBER,
    "WAIT_CLASS"                VARCHAR2(64),
    "WAIT_TIME"                 NUMBER,
    "SECONDS_IN_WAIT"           NUMBER,
    "STATE"                     VARCHAR2(19),
    "SERVICE_NAME"              VARCHAR2(64),
    "SQL_TRACE"                 VARCHAR2(8),
    "SQL_TRACE_WAITS"           VARCHAR2(5),
    "SQL_TRACE_BINDS"           VARCHAR2(5),
    "ECID"                      VARCHAR2(64)
);

-- GV$SESSION structure from Oracle version 11.2.0.3
CREATE TABLE yaashsr.gv$session_src_11203 (
---- Additional columns NAME and DBID for YaASHs
    "NAME"                          VARCHAR2(128) NOT NULL,
    "DBID"                          NUMBER,
---- Original columns of GV$SESSION
    "INST_ID"                       NUMBER,
    "SADDR"                         RAW(8),
    "SID"                           NUMBER,
    "SERIAL#"                       NUMBER,
    "AUDSID"                        NUMBER,
    "PADDR"                         RAW(8),
    "USER#"                         NUMBER,
    "USERNAME"                      VARCHAR2(30),
    "COMMAND"                       NUMBER,
    "OWNERID"                       NUMBER,
    "TADDR"                         VARCHAR2(16),
    "LOCKWAIT"                      VARCHAR2(16),
    "STATUS"                        VARCHAR2(8),
    "SERVER"                        VARCHAR2(9),
    "SCHEMA#"                       NUMBER,
    "SCHEMANAME"                    VARCHAR2(30),
    "OSUSER"                        VARCHAR2(30),
    "PROCESS"                       VARCHAR2(24),
    "MACHINE"                       VARCHAR2(64),
    "PORT"                          NUMBER,
    "TERMINAL"                      VARCHAR2(30),
    "PROGRAM"                       VARCHAR2(48),
    "TYPE"                          VARCHAR2(10),
    "SQL_ADDRESS"                   RAW(8),
    "SQL_HASH_VALUE"                NUMBER,
    "SQL_ID"                        VARCHAR2(13),
    "SQL_CHILD_NUMBER"              NUMBER,
    "SQL_EXEC_START"                DATE,
    "SQL_EXEC_ID"                   NUMBER,
    "PREV_SQL_ADDR"                 RAW(8),
    "PREV_HASH_VALUE"               NUMBER,
    "PREV_SQL_ID"                   VARCHAR2(13),
    "PREV_CHILD_NUMBER"             NUMBER,
    "PREV_EXEC_START"               DATE,
    "PREV_EXEC_ID"                  NUMBER,
    "PLSQL_ENTRY_OBJECT_ID"         NUMBER,
    "PLSQL_ENTRY_SUBPROGRAM_ID"     NUMBER,
    "PLSQL_OBJECT_ID"               NUMBER,
    "PLSQL_SUBPROGRAM_ID"           NUMBER,
    "MODULE"                        VARCHAR2(64),
    "MODULE_HASH"                   NUMBER,
    "ACTION"                        VARCHAR2(64),
    "ACTION_HASH"                   NUMBER,
    "CLIENT_INFO"                   VARCHAR2(64),
    "FIXED_TABLE_SEQUENCE"          NUMBER,
    "ROW_WAIT_OBJ#"                 NUMBER,
    "ROW_WAIT_FILE#"                NUMBER,
    "ROW_WAIT_BLOCK#"               NUMBER,
    "ROW_WAIT_ROW#"                 NUMBER,
    "TOP_LEVEL_CALL#"               NUMBER,
    "LOGON_TIME"                    DATE,
    "LAST_CALL_ET"                  NUMBER,
    "PDML_ENABLED"                  VARCHAR2(3),
    "FAILOVER_TYPE"                 VARCHAR2(13),
    "FAILOVER_METHOD"               VARCHAR2(10),
    "FAILED_OVER"                   VARCHAR2(3),
    "RESOURCE_CONSUMER_GROUP"       VARCHAR2(32),
    "PDML_STATUS"                   VARCHAR2(8),
    "PDDL_STATUS"                   VARCHAR2(8),
    "PQ_STATUS"                     VARCHAR2(8),
    "CURRENT_QUEUE_DURATION"        NUMBER,
    "CLIENT_IDENTIFIER"             VARCHAR2(64),
    "BLOCKING_SESSION_STATUS"       VARCHAR2(11),
    "BLOCKING_INSTANCE"             NUMBER,
    "BLOCKING_SESSION"              NUMBER,
    "FINAL_BLOCKING_SESSION_STATUS" VARCHAR2(11),
    "FINAL_BLOCKING_INSTANCE"       NUMBER,
    "FINAL_BLOCKING_SESSION"        NUMBER,
    "SEQ#"                          NUMBER,
    "EVENT#"                        NUMBER,
    "EVENT"                         VARCHAR2(64),
    "P1TEXT"                        VARCHAR2(64),
    "P1"                            NUMBER,
    "P1RAW"                         RAW(8),
    "P2TEXT"                        VARCHAR2(64),
    "P2"                            NUMBER,
    "P2RAW"                         RAW(8),
    "P3TEXT"                        VARCHAR2(64),
    "P3"                            NUMBER,
    "P3RAW"                         RAW(8),
    "WAIT_CLASS_ID"                 NUMBER,
    "WAIT_CLASS#"                   NUMBER,
    "WAIT_CLASS"                    VARCHAR2(64),
    "WAIT_TIME"                     NUMBER,
    "SECONDS_IN_WAIT"               NUMBER,
    "STATE"                         VARCHAR2(19),
    "WAIT_TIME_MICRO"               NUMBER,
    "TIME_REMAINING_MICRO"          NUMBER,
    "TIME_SINCE_LAST_WAIT_MICRO"    NUMBER,
    "SERVICE_NAME"                  VARCHAR2(64),
    "SQL_TRACE"                     VARCHAR2(8),
    "SQL_TRACE_WAITS"               VARCHAR2(5),
    "SQL_TRACE_BINDS"               VARCHAR2(5),
    "SQL_TRACE_PLAN_STATS"          VARCHAR2(10),
    "SESSION_EDITION_ID"            NUMBER,
    "CREATOR_ADDR"                  RAW(8),
    "CREATOR_SERIAL#"               NUMBER,
    "ECID"                          VARCHAR2(64)
);

-- GV$SESSION structure from Oracle version 12.1.0.1
CREATE TABLE yaashsr.gv$session_src_12101 (
---- Additional columns NAME and DBID for YaASHs
    "NAME"                          VARCHAR2(128) NOT NULL,
    "DBID"                          NUMBER,
---- Original columns of GV$SESSION
    "INST_ID"                       NUMBER,
    "SADDR"                         RAW(8),
    "SID"                           NUMBER,
    "SERIAL#"                       NUMBER,
    "AUDSID"                        NUMBER,
    "PADDR"                         RAW(8),
    "USER#"                         NUMBER,
    "USERNAME"                      VARCHAR2(30),
    "COMMAND"                       NUMBER,
    "OWNERID"                       NUMBER,
    "TADDR"                         VARCHAR2(16),
    "LOCKWAIT"                      VARCHAR2(16),
    "STATUS"                        VARCHAR2(8),
    "SERVER"                        VARCHAR2(9),
    "SCHEMA#"                       NUMBER,
    "SCHEMANAME"                    VARCHAR2(30),
    "OSUSER"                        VARCHAR2(30),
    "PROCESS"                       VARCHAR2(24),
    "MACHINE"                       VARCHAR2(64),
    "PORT"                          NUMBER,
    "TERMINAL"                      VARCHAR2(30),
    "PROGRAM"                       VARCHAR2(48),
    "TYPE"                          VARCHAR2(10),
    "SQL_ADDRESS"                   RAW(8),
    "SQL_HASH_VALUE"                NUMBER,
    "SQL_ID"                        VARCHAR2(13),
    "SQL_CHILD_NUMBER"              NUMBER,
    "SQL_EXEC_START"                DATE,
    "SQL_EXEC_ID"                   NUMBER,
    "PREV_SQL_ADDR"                 RAW(8),
    "PREV_HASH_VALUE"               NUMBER,
    "PREV_SQL_ID"                   VARCHAR2(13),
    "PREV_CHILD_NUMBER"             NUMBER,
    "PREV_EXEC_START"               DATE,
    "PREV_EXEC_ID"                  NUMBER,
    "PLSQL_ENTRY_OBJECT_ID"         NUMBER,
    "PLSQL_ENTRY_SUBPROGRAM_ID"     NUMBER,
    "PLSQL_OBJECT_ID"               NUMBER,
    "PLSQL_SUBPROGRAM_ID"           NUMBER,
    "MODULE"                        VARCHAR2(64),
    "MODULE_HASH"                   NUMBER,
    "ACTION"                        VARCHAR2(64),
    "ACTION_HASH"                   NUMBER,
    "CLIENT_INFO"                   VARCHAR2(64),
    "FIXED_TABLE_SEQUENCE"          NUMBER,
    "ROW_WAIT_OBJ#"                 NUMBER,
    "ROW_WAIT_FILE#"                NUMBER,
    "ROW_WAIT_BLOCK#"               NUMBER,
    "ROW_WAIT_ROW#"                 NUMBER,
    "TOP_LEVEL_CALL#"               NUMBER,
    "LOGON_TIME"                    DATE,
    "LAST_CALL_ET"                  NUMBER,
    "PDML_ENABLED"                  VARCHAR2(3),
    "FAILOVER_TYPE"                 VARCHAR2(13),
    "FAILOVER_METHOD"               VARCHAR2(10),
    "FAILED_OVER"                   VARCHAR2(3),
    "RESOURCE_CONSUMER_GROUP"       VARCHAR2(32),
    "PDML_STATUS"                   VARCHAR2(8),
    "PDDL_STATUS"                   VARCHAR2(8),
    "PQ_STATUS"                     VARCHAR2(8),
    "CURRENT_QUEUE_DURATION"        NUMBER,
    "CLIENT_IDENTIFIER"             VARCHAR2(64),
    "BLOCKING_SESSION_STATUS"       VARCHAR2(11),
    "BLOCKING_INSTANCE"             NUMBER,
    "BLOCKING_SESSION"              NUMBER,
    "FINAL_BLOCKING_SESSION_STATUS" VARCHAR2(11),
    "FINAL_BLOCKING_INSTANCE"       NUMBER,
    "FINAL_BLOCKING_SESSION"        NUMBER,
    "SEQ#"                          NUMBER,
    "EVENT#"                        NUMBER,
    "EVENT"                         VARCHAR2(64),
    "P1TEXT"                        VARCHAR2(64),
    "P1"                            NUMBER,
    "P1RAW"                         RAW(8),
    "P2TEXT"                        VARCHAR2(64),
    "P2"                            NUMBER,
    "P2RAW"                         RAW(8),
    "P3TEXT"                        VARCHAR2(64),
    "P3"                            NUMBER,
    "P3RAW"                         RAW(8),
    "WAIT_CLASS_ID"                 NUMBER,
    "WAIT_CLASS#"                   NUMBER,
    "WAIT_CLASS"                    VARCHAR2(64),
    "WAIT_TIME"                     NUMBER,
    "SECONDS_IN_WAIT"               NUMBER,
    "STATE"                         VARCHAR2(19),
    "WAIT_TIME_MICRO"               NUMBER,
    "TIME_REMAINING_MICRO"          NUMBER,
    "TIME_SINCE_LAST_WAIT_MICRO"    NUMBER,
    "SERVICE_NAME"                  VARCHAR2(64),
    "SQL_TRACE"                     VARCHAR2(8),
    "SQL_TRACE_WAITS"               VARCHAR2(5),
    "SQL_TRACE_BINDS"               VARCHAR2(5),
    "SQL_TRACE_PLAN_STATS"          VARCHAR2(10),
    "SESSION_EDITION_ID"            NUMBER,
    "CREATOR_ADDR"                  RAW(8),
    "CREATOR_SERIAL#"               NUMBER,
    "ECID"                          VARCHAR2(64),
    "SQL_TRANSLATION_PROFILE_ID"    NUMBER,
    "PGA_TUNABLE_MEM"               NUMBER,
    "CON_ID"                        NUMBER,
    "EXTERNAL_NAME"                 VARCHAR2(1024)
);

-- GV$SESSION structure from Oracle version 12.2.0.1
CREATE TABLE yaashsr.gv$session_src_12201 (
---- Additional columns NAME and DBID for YaASHs
    "NAME"                          VARCHAR2(128) NOT NULL,
    "DBID"                          NUMBER,
---- Original columns of GV$SESSION
    "INST_ID"                       NUMBER,
    "SADDR"                         RAW(8),
    "SID"                           NUMBER,
    "SERIAL#"                       NUMBER,
    "AUDSID"                        NUMBER,
    "PADDR"                         RAW(8),
    "USER#"                         NUMBER,
    "USERNAME"                      VARCHAR2(128),
    "COMMAND"                       NUMBER,
    "OWNERID"                       NUMBER,
    "TADDR"                         VARCHAR2(16),
    "LOCKWAIT"                      VARCHAR2(16),
    "STATUS"                        VARCHAR2(8),
    "SERVER"                        VARCHAR2(9),
    "SCHEMA#"                       NUMBER,
    "SCHEMANAME"                    VARCHAR2(128),
    "OSUSER"                        VARCHAR2(128),
    "PROCESS"                       VARCHAR2(24),
    "MACHINE"                       VARCHAR2(64),
    "PORT"                          NUMBER,
    "TERMINAL"                      VARCHAR2(30),
    "PROGRAM"                       VARCHAR2(48),
    "TYPE"                          VARCHAR2(10),
    "SQL_ADDRESS"                   RAW(8),
    "SQL_HASH_VALUE"                NUMBER,
    "SQL_ID"                        VARCHAR2(13),
    "SQL_CHILD_NUMBER"              NUMBER,
    "SQL_EXEC_START"                DATE,
    "SQL_EXEC_ID"                   NUMBER,
    "PREV_SQL_ADDR"                 RAW(8),
    "PREV_HASH_VALUE"               NUMBER,
    "PREV_SQL_ID"                   VARCHAR2(13),
    "PREV_CHILD_NUMBER"             NUMBER,
    "PREV_EXEC_START"               DATE,
    "PREV_EXEC_ID"                  NUMBER,
    "PLSQL_ENTRY_OBJECT_ID"         NUMBER,
    "PLSQL_ENTRY_SUBPROGRAM_ID"     NUMBER,
    "PLSQL_OBJECT_ID"               NUMBER,
    "PLSQL_SUBPROGRAM_ID"           NUMBER,
    "MODULE"                        VARCHAR2(64),
    "MODULE_HASH"                   NUMBER,
    "ACTION"                        VARCHAR2(64),
    "ACTION_HASH"                   NUMBER,
    "CLIENT_INFO"                   VARCHAR2(64),
    "FIXED_TABLE_SEQUENCE"          NUMBER,
    "ROW_WAIT_OBJ#"                 NUMBER,
    "ROW_WAIT_FILE#"                NUMBER,
    "ROW_WAIT_BLOCK#"               NUMBER,
    "ROW_WAIT_ROW#"                 NUMBER,
    "TOP_LEVEL_CALL#"               NUMBER,
    "LOGON_TIME"                    DATE,
    "LAST_CALL_ET"                  NUMBER,
    "PDML_ENABLED"                  VARCHAR2(3),
    "FAILOVER_TYPE"                 VARCHAR2(13),
    "FAILOVER_METHOD"               VARCHAR2(10),
    "FAILED_OVER"                   VARCHAR2(3),
    "RESOURCE_CONSUMER_GROUP"       VARCHAR2(32),
    "PDML_STATUS"                   VARCHAR2(8),
    "PDDL_STATUS"                   VARCHAR2(8),
    "PQ_STATUS"                     VARCHAR2(8),
    "CURRENT_QUEUE_DURATION"        NUMBER,
    "CLIENT_IDENTIFIER"             VARCHAR2(64),
    "BLOCKING_SESSION_STATUS"       VARCHAR2(11),
    "BLOCKING_INSTANCE"             NUMBER,
    "BLOCKING_SESSION"              NUMBER,
    "FINAL_BLOCKING_SESSION_STATUS" VARCHAR2(11),
    "FINAL_BLOCKING_INSTANCE"       NUMBER,
    "FINAL_BLOCKING_SESSION"        NUMBER,
    "SEQ#"                          NUMBER,
    "EVENT#"                        NUMBER,
    "EVENT"                         VARCHAR2(64),
    "P1TEXT"                        VARCHAR2(64),
    "P1"                            NUMBER,
    "P1RAW"                         RAW(8),
    "P2TEXT"                        VARCHAR2(64),
    "P2"                            NUMBER,
    "P2RAW"                         RAW(8),
    "P3TEXT"                        VARCHAR2(64),
    "P3"                            NUMBER,
    "P3RAW"                         RAW(8),
    "WAIT_CLASS_ID"                 NUMBER,
    "WAIT_CLASS#"                   NUMBER,
    "WAIT_CLASS"                    VARCHAR2(64),
    "WAIT_TIME"                     NUMBER,
    "SECONDS_IN_WAIT"               NUMBER,
    "STATE"                         VARCHAR2(19),
    "WAIT_TIME_MICRO"               NUMBER,
    "TIME_REMAINING_MICRO"          NUMBER,
    "TIME_SINCE_LAST_WAIT_MICRO"    NUMBER,
    "SERVICE_NAME"                  VARCHAR2(64),
    "SQL_TRACE"                     VARCHAR2(8),
    "SQL_TRACE_WAITS"               VARCHAR2(5),
    "SQL_TRACE_BINDS"               VARCHAR2(5),
    "SQL_TRACE_PLAN_STATS"          VARCHAR2(10),
    "SESSION_EDITION_ID"            NUMBER,
    "CREATOR_ADDR"                  RAW(8),
    "CREATOR_SERIAL#"               NUMBER,
    "ECID"                          VARCHAR2(64),
    "SQL_TRANSLATION_PROFILE_ID"    NUMBER,
    "PGA_TUNABLE_MEM"               NUMBER,
    "SHARD_DDL_STATUS"              VARCHAR2(8),
    "CON_ID"                        NUMBER,
    "EXTERNAL_NAME"                 VARCHAR2(1024),
    "PLSQL_DEBUGGER_CONNECTED"      VARCHAR2(5)
);

-- GV$SESSION structure from Oracle version 18.3
CREATE TABLE yaashsr.gv$session_src_183 (
---- Additional columns NAME and DBID for YaASHs
    "NAME"                          VARCHAR2(128) NOT NULL,
    "DBID"                          NUMBER,
---- Original columns of GV$SESSION
    "INST_ID"                       NUMBER,
    "SADDR"                         RAW(8),
    "SID"                           NUMBER,
    "SERIAL#"                       NUMBER,
    "AUDSID"                        NUMBER,
    "PADDR"                         RAW(8),
    "USER#"                         NUMBER,
    "USERNAME"                      VARCHAR2(128),
    "COMMAND"                       NUMBER,
    "OWNERID"                       NUMBER,
    "TADDR"                         VARCHAR2(16),
    "LOCKWAIT"                      VARCHAR2(16),
    "STATUS"                        VARCHAR2(8),
    "SERVER"                        VARCHAR2(9),
    "SCHEMA#"                       NUMBER,
    "SCHEMANAME"                    VARCHAR2(128),
    "OSUSER"                        VARCHAR2(128),
    "PROCESS"                       VARCHAR2(24),
    "MACHINE"                       VARCHAR2(64),
    "PORT"                          NUMBER,
    "TERMINAL"                      VARCHAR2(30),
    "PROGRAM"                       VARCHAR2(48),
    "TYPE"                          VARCHAR2(10),
    "SQL_ADDRESS"                   RAW(8),
    "SQL_HASH_VALUE"                NUMBER,
    "SQL_ID"                        VARCHAR2(13),
    "SQL_CHILD_NUMBER"              NUMBER,
    "SQL_EXEC_START"                DATE,
    "SQL_EXEC_ID"                   NUMBER,
    "PREV_SQL_ADDR"                 RAW(8),
    "PREV_HASH_VALUE"               NUMBER,
    "PREV_SQL_ID"                   VARCHAR2(13),
    "PREV_CHILD_NUMBER"             NUMBER,
    "PREV_EXEC_START"               DATE,
    "PREV_EXEC_ID"                  NUMBER,
    "PLSQL_ENTRY_OBJECT_ID"         NUMBER,
    "PLSQL_ENTRY_SUBPROGRAM_ID"     NUMBER,
    "PLSQL_OBJECT_ID"               NUMBER,
    "PLSQL_SUBPROGRAM_ID"           NUMBER,
    "MODULE"                        VARCHAR2(64),
    "MODULE_HASH"                   NUMBER,
    "ACTION"                        VARCHAR2(64),
    "ACTION_HASH"                   NUMBER,
    "CLIENT_INFO"                   VARCHAR2(64),
    "FIXED_TABLE_SEQUENCE"          NUMBER,
    "ROW_WAIT_OBJ#"                 NUMBER,
    "ROW_WAIT_FILE#"                NUMBER,
    "ROW_WAIT_BLOCK#"               NUMBER,
    "ROW_WAIT_ROW#"                 NUMBER,
    "TOP_LEVEL_CALL#"               NUMBER,
    "LOGON_TIME"                    DATE,
    "LAST_CALL_ET"                  NUMBER,
    "PDML_ENABLED"                  VARCHAR2(3),
    "FAILOVER_TYPE"                 VARCHAR2(13),
    "FAILOVER_METHOD"               VARCHAR2(10),
    "FAILED_OVER"                   VARCHAR2(3),
    "RESOURCE_CONSUMER_GROUP"       VARCHAR2(32),
    "PDML_STATUS"                   VARCHAR2(8),
    "PDDL_STATUS"                   VARCHAR2(8),
    "PQ_STATUS"                     VARCHAR2(8),
    "CURRENT_QUEUE_DURATION"        NUMBER,
    "CLIENT_IDENTIFIER"             VARCHAR2(64),
    "BLOCKING_SESSION_STATUS"       VARCHAR2(11),
    "BLOCKING_INSTANCE"             NUMBER,
    "BLOCKING_SESSION"              NUMBER,
    "FINAL_BLOCKING_SESSION_STATUS" VARCHAR2(11),
    "FINAL_BLOCKING_INSTANCE"       NUMBER,
    "FINAL_BLOCKING_SESSION"        NUMBER,
    "SEQ#"                          NUMBER,
    "EVENT#"                        NUMBER,
    "EVENT"                         VARCHAR2(64),
    "P1TEXT"                        VARCHAR2(64),
    "P1"                            NUMBER,
    "P1RAW"                         RAW(8),
    "P2TEXT"                        VARCHAR2(64),
    "P2"                            NUMBER,
    "P2RAW"                         RAW(8),
    "P3TEXT"                        VARCHAR2(64),
    "P3"                            NUMBER,
    "P3RAW"                         RAW(8),
    "WAIT_CLASS_ID"                 NUMBER,
    "WAIT_CLASS#"                   NUMBER,
    "WAIT_CLASS"                    VARCHAR2(64),
    "WAIT_TIME"                     NUMBER,
    "SECONDS_IN_WAIT"               NUMBER,
    "STATE"                         VARCHAR2(19),
    "WAIT_TIME_MICRO"               NUMBER,
    "TIME_REMAINING_MICRO"          NUMBER,
    "TIME_SINCE_LAST_WAIT_MICRO"    NUMBER,
    "SERVICE_NAME"                  VARCHAR2(64),
    "SQL_TRACE"                     VARCHAR2(8),
    "SQL_TRACE_WAITS"               VARCHAR2(5),
    "SQL_TRACE_BINDS"               VARCHAR2(5),
    "SQL_TRACE_PLAN_STATS"          VARCHAR2(10),
    "SESSION_EDITION_ID"            NUMBER,
    "CREATOR_ADDR"                  RAW(8),
    "CREATOR_SERIAL#"               NUMBER,
    "ECID"                          VARCHAR2(64),
    "SQL_TRANSLATION_PROFILE_ID"    NUMBER,
    "PGA_TUNABLE_MEM"               NUMBER,
    "SHARD_DDL_STATUS"              VARCHAR2(8),
    "CON_ID"                        NUMBER,
    "EXTERNAL_NAME"                 VARCHAR2(1024),
    "PLSQL_DEBUGGER_CONNECTED"      VARCHAR2(5)
);

-- GV$SESSION structure from Oracle version 19.11
CREATE TABLE yaashsr.gv$session_src_1911 (
---- Additional columns NAME and DBID for YaASHs
    "NAME"                        VARCHAR2(128) NOT NULL,
    "DBID"                        NUMBER,
---- Original columns of GV$SESSION
    "INST_ID"                       NUMBER,
    "SADDR"                         RAW(8),
    "SID"                           NUMBER,
    "SERIAL#"                       NUMBER,
    "AUDSID"                        NUMBER,
    "PADDR"                         RAW(8),
    "USER#"                         NUMBER,
    "USERNAME"                      VARCHAR2(128),
    "COMMAND"                       NUMBER,
    "OWNERID"                       NUMBER,
    "TADDR"                         VARCHAR2(16),
    "LOCKWAIT"                      VARCHAR2(16),
    "STATUS"                        VARCHAR2(8),
    "SERVER"                        VARCHAR2(9),
    "SCHEMA#"                       NUMBER,
    "SCHEMANAME"                    VARCHAR2(128),
    "OSUSER"                        VARCHAR2(128),
    "PROCESS"                       VARCHAR2(24),
    "MACHINE"                       VARCHAR2(64),
    "PORT"                          NUMBER,
    "TERMINAL"                      VARCHAR2(30),
    "PROGRAM"                       VARCHAR2(48),
    "TYPE"                          VARCHAR2(10),
    "SQL_ADDRESS"                   RAW(8),
    "SQL_HASH_VALUE"                NUMBER,
    "SQL_ID"                        VARCHAR2(13),
    "SQL_CHILD_NUMBER"              NUMBER,
    "SQL_EXEC_START"                DATE,
    "SQL_EXEC_ID"                   NUMBER,
    "PREV_SQL_ADDR"                 RAW(8),
    "PREV_HASH_VALUE"               NUMBER,
    "PREV_SQL_ID"                   VARCHAR2(13),
    "PREV_CHILD_NUMBER"             NUMBER,
    "PREV_EXEC_START"               DATE,
    "PREV_EXEC_ID"                  NUMBER,
    "PLSQL_ENTRY_OBJECT_ID"         NUMBER,
    "PLSQL_ENTRY_SUBPROGRAM_ID"     NUMBER,
    "PLSQL_OBJECT_ID"               NUMBER,
    "PLSQL_SUBPROGRAM_ID"           NUMBER,
    "MODULE"                        VARCHAR2(64),
    "MODULE_HASH"                   NUMBER,
    "ACTION"                        VARCHAR2(64),
    "ACTION_HASH"                   NUMBER,
    "CLIENT_INFO"                   VARCHAR2(64),
    "FIXED_TABLE_SEQUENCE"          NUMBER,
    "ROW_WAIT_OBJ#"                 NUMBER,
    "ROW_WAIT_FILE#"                NUMBER,
    "ROW_WAIT_BLOCK#"               NUMBER,
    "ROW_WAIT_ROW#"                 NUMBER,
    "TOP_LEVEL_CALL#"               NUMBER,
    "LOGON_TIME"                    DATE,
    "LAST_CALL_ET"                  NUMBER,
    "PDML_ENABLED"                  VARCHAR2(3),
    "FAILOVER_TYPE"                 VARCHAR2(13),
    "FAILOVER_METHOD"               VARCHAR2(10),
    "FAILED_OVER"                   VARCHAR2(3),
    "RESOURCE_CONSUMER_GROUP"       VARCHAR2(32),
    "PDML_STATUS"                   VARCHAR2(8),
    "PDDL_STATUS"                   VARCHAR2(8),
    "PQ_STATUS"                     VARCHAR2(8),
    "CURRENT_QUEUE_DURATION"        NUMBER,
    "CLIENT_IDENTIFIER"             VARCHAR2(64),
    "BLOCKING_SESSION_STATUS"       VARCHAR2(11),
    "BLOCKING_INSTANCE"             NUMBER,
    "BLOCKING_SESSION"              NUMBER,
    "FINAL_BLOCKING_SESSION_STATUS" VARCHAR2(11),
    "FINAL_BLOCKING_INSTANCE"       NUMBER,
    "FINAL_BLOCKING_SESSION"        NUMBER,
    "SEQ#"                          NUMBER,
    "EVENT#"                        NUMBER,
    "EVENT"                         VARCHAR2(64),
    "P1TEXT"                        VARCHAR2(64),
    "P1"                            NUMBER,
    "P1RAW"                         RAW(8),
    "P2TEXT"                        VARCHAR2(64),
    "P2"                            NUMBER,
    "P2RAW"                         RAW(8),
    "P3TEXT"                        VARCHAR2(64),
    "P3"                            NUMBER,
    "P3RAW"                         RAW(8),
    "WAIT_CLASS_ID"                 NUMBER,
    "WAIT_CLASS#"                   NUMBER,
    "WAIT_CLASS"                    VARCHAR2(64),
    "WAIT_TIME"                     NUMBER,
    "SECONDS_IN_WAIT"               NUMBER,
    "STATE"                         VARCHAR2(19),
    "WAIT_TIME_MICRO"               NUMBER,
    "TIME_REMAINING_MICRO"          NUMBER,
    "TIME_SINCE_LAST_WAIT_MICRO"    NUMBER,
    "SERVICE_NAME"                  VARCHAR2(64),
    "SQL_TRACE"                     VARCHAR2(8),
    "SQL_TRACE_WAITS"               VARCHAR2(5),
    "SQL_TRACE_BINDS"               VARCHAR2(5),
    "SQL_TRACE_PLAN_STATS"          VARCHAR2(10),
    "SESSION_EDITION_ID"            NUMBER,
    "CREATOR_ADDR"                  RAW(8),
    "CREATOR_SERIAL#"               NUMBER,
    "ECID"                          VARCHAR2(64),
    "SQL_TRANSLATION_PROFILE_ID"    NUMBER,
    "PGA_TUNABLE_MEM"               NUMBER,
    "SHARD_DDL_STATUS"              VARCHAR2(8),
    "CON_ID"                        NUMBER,
    "EXTERNAL_NAME"                 VARCHAR2(1024),
    "PLSQL_DEBUGGER_CONNECTED"      VARCHAR2(5)
);

-- GV$ACTIVE_SESSION_HISTORY structure from Oracle version 10.2.0.5
CREATE TABLE yaashsr.gv$active_session_history_src_10205 (
---- Additional columns NAME and DBID for YaASHs
    "NAME"                      VARCHAR2(128) NOT NULL,
    "DBID"                      NUMBER,
---- Original columns of GV$ACTIVE_SESSION_HISTORY
    "INST_ID"                   NUMBER,
    "SAMPLE_ID"                 NUMBER,
    "SAMPLE_TIME"               TIMESTAMP(3),
    "SESSION_ID"                NUMBER,
    "SESSION_SERIAL#"           NUMBER,
    "USER_ID"                   NUMBER,
    "SQL_ID"                    VARCHAR2(13),
    "SQL_CHILD_NUMBER"          NUMBER,
    "SQL_PLAN_HASH_VALUE"       NUMBER,
    "FORCE_MATCHING_SIGNATURE"  NUMBER,
    "SQL_OPCODE"                NUMBER,
    "PLSQL_ENTRY_OBJECT_ID"     NUMBER,
    "PLSQL_ENTRY_SUBPROGRAM_ID" NUMBER,
    "PLSQL_OBJECT_ID"           NUMBER,
    "PLSQL_SUBPROGRAM_ID"       NUMBER,
    "SERVICE_HASH"              NUMBER,
    "SESSION_TYPE"              VARCHAR2(10),
    "SESSION_STATE"             VARCHAR2(7),
    "QC_SESSION_ID"             NUMBER,
    "QC_INSTANCE_ID"            NUMBER,
    "BLOCKING_SESSION"          NUMBER,
    "BLOCKING_SESSION_STATUS"   VARCHAR2(11),
    "BLOCKING_SESSION_SERIAL#"  NUMBER,
    "EVENT"                     VARCHAR2(64),
    "EVENT_ID"                  NUMBER,
    "EVENT#"                    NUMBER,
    "SEQ#"                      NUMBER,
    "P1TEXT"                    VARCHAR2(64),
    "P1"                        NUMBER,
    "P2TEXT"                    VARCHAR2(64),
    "P2"                        NUMBER,
    "P3TEXT"                    VARCHAR2(64),
    "P3"                        NUMBER,
    "WAIT_CLASS"                VARCHAR2(64),
    "WAIT_CLASS_ID"             NUMBER,
    "WAIT_TIME"                 NUMBER,
    "TIME_WAITED"               NUMBER,
    "XID"                       RAW(8),
    "CURRENT_OBJ#"              NUMBER,
    "CURRENT_FILE#"             NUMBER,
    "CURRENT_BLOCK#"            NUMBER,
    "CAPTURE_OVERHEAD"          VARCHAR2(1),
    "IS_CAPTURED"               VARCHAR2(1),
    "PROGRAM"                   VARCHAR2(48),
    "MODULE"                    VARCHAR2(48),
    "ACTION"                    VARCHAR2(32),
    "CLIENT_ID"                 VARCHAR2(64),
    "MACHINE"                   VARCHAR2(64),
    "PORT"                      NUMBER,
    "ECID"                      VARCHAR2(64),
    "FLAGS"                     NUMBER
);

-- GV$ACTIVE_SESSION_HISTORY structure from Oracle version 11.2.0.3
CREATE TABLE yaashsr.gv$active_session_history_src_11203 (
---- Additional columns NAME and DBID for YaASHs
    "NAME"                        VARCHAR2(128) NOT NULL,
    "DBID"                        NUMBER,
---- Original columns of GV$ACTIVE_SESSION_HISTORY
    "INST_ID"                     NUMBER,
    "SAMPLE_ID"                   NUMBER,
    "SAMPLE_TIME"                 TIMESTAMP(3),
    "IS_AWR_SAMPLE"               VARCHAR2(1),
    "SESSION_ID"                  NUMBER,
    "SESSION_SERIAL#"             NUMBER,
    "SESSION_TYPE"                VARCHAR2(10),
    "FLAGS"                       NUMBER,
    "USER_ID"                     NUMBER,
    "SQL_ID"                      VARCHAR2(13),
    "IS_SQLID_CURRENT"            VARCHAR2(1),
    "SQL_CHILD_NUMBER"            NUMBER,
    "SQL_OPCODE"                  NUMBER,
    "FORCE_MATCHING_SIGNATURE"    NUMBER,
    "TOP_LEVEL_SQL_ID"            VARCHAR2(13),
    "TOP_LEVEL_SQL_OPCODE"        NUMBER,
    "SQL_OPNAME"                  VARCHAR2(64),
    "SQL_PLAN_HASH_VALUE"         NUMBER,
    "SQL_PLAN_LINE_ID"            NUMBER,
    "SQL_PLAN_OPERATION"          VARCHAR2(30),
    "SQL_PLAN_OPTIONS"            VARCHAR2(30),
    "SQL_EXEC_ID"                 NUMBER,
    "SQL_EXEC_START"              DATE,
    "PLSQL_ENTRY_OBJECT_ID"       NUMBER,
    "PLSQL_ENTRY_SUBPROGRAM_ID"   NUMBER,
    "PLSQL_OBJECT_ID"             NUMBER,
    "PLSQL_SUBPROGRAM_ID"         NUMBER,
    "QC_INSTANCE_ID"              NUMBER,
    "QC_SESSION_ID"               NUMBER,
    "QC_SESSION_SERIAL#"          NUMBER,
    "PX_FLAGS"                    NUMBER,
    "EVENT"                       VARCHAR2(64),
    "EVENT_ID"                    NUMBER,
    "EVENT#"                      NUMBER,
    "SEQ#"                        NUMBER,
    "P1TEXT"                      VARCHAR2(64),
    "P1"                          NUMBER,
    "P2TEXT"                      VARCHAR2(64),
    "P2"                          NUMBER,
    "P3TEXT"                      VARCHAR2(64),
    "P3"                          NUMBER,
    "WAIT_CLASS"                  VARCHAR2(64),
    "WAIT_CLASS_ID"               NUMBER,
    "WAIT_TIME"                   NUMBER,
    "SESSION_STATE"               VARCHAR2(7),
    "TIME_WAITED"                 NUMBER,
    "BLOCKING_SESSION_STATUS"     VARCHAR2(11),
    "BLOCKING_SESSION"            NUMBER,
    "BLOCKING_SESSION_SERIAL#"    NUMBER,
    "BLOCKING_INST_ID"            NUMBER,
    "BLOCKING_HANGCHAIN_INFO"     VARCHAR2(1),
    "CURRENT_OBJ#"                NUMBER,
    "CURRENT_FILE#"               NUMBER,
    "CURRENT_BLOCK#"              NUMBER,
    "CURRENT_ROW#"                NUMBER,
    "TOP_LEVEL_CALL#"             NUMBER,
    "TOP_LEVEL_CALL_NAME"         VARCHAR2(64),
    "CONSUMER_GROUP_ID"           NUMBER,
    "XID"                         RAW(8),
    "REMOTE_INSTANCE#"            NUMBER,
    "TIME_MODEL"                  NUMBER,
    "IN_CONNECTION_MGMT"          VARCHAR2(1),
    "IN_PARSE"                    VARCHAR2(1),
    "IN_HARD_PARSE"               VARCHAR2(1),
    "IN_SQL_EXECUTION"            VARCHAR2(1),
    "IN_PLSQL_EXECUTION"          VARCHAR2(1),
    "IN_PLSQL_RPC"                VARCHAR2(1),
    "IN_PLSQL_COMPILATION"        VARCHAR2(1),
    "IN_JAVA_EXECUTION"           VARCHAR2(1),
    "IN_BIND"                     VARCHAR2(1),
    "IN_CURSOR_CLOSE"             VARCHAR2(1),
    "IN_SEQUENCE_LOAD"            VARCHAR2(1),
    "CAPTURE_OVERHEAD"            VARCHAR2(1),
    "REPLAY_OVERHEAD"             VARCHAR2(1),
    "IS_CAPTURED"                 VARCHAR2(1),
    "IS_REPLAYED"                 VARCHAR2(1),
    "SERVICE_HASH"                NUMBER,
    "PROGRAM"                     VARCHAR2(48),
    "MODULE"                      VARCHAR2(64),
    "ACTION"                      VARCHAR2(64),
    "CLIENT_ID"                   VARCHAR2(64),
    "MACHINE"                     VARCHAR2(64),
    "PORT"                        NUMBER,
    "ECID"                        VARCHAR2(64),
    "DBREPLAY_FILE_ID"            NUMBER,
    "DBREPLAY_CALL_COUNTER"       NUMBER,
    "TM_DELTA_TIME"               NUMBER,
    "TM_DELTA_CPU_TIME"           NUMBER,
    "TM_DELTA_DB_TIME"            NUMBER,
    "DELTA_TIME"                  NUMBER,
    "DELTA_READ_IO_REQUESTS"      NUMBER,
    "DELTA_WRITE_IO_REQUESTS"     NUMBER,
    "DELTA_READ_IO_BYTES"         NUMBER,
    "DELTA_WRITE_IO_BYTES"        NUMBER,
    "DELTA_INTERCONNECT_IO_BYTES" NUMBER,
    "PGA_ALLOCATED"               NUMBER,
    "TEMP_SPACE_ALLOCATED"        NUMBER
);

-- GV$ACTIVE_SESSION_HISTORY structure from Oracle version 12.1.0.1
CREATE TABLE yaashsr.gv$active_session_history_src_12101 (
---- Additional columns NAME and DBID for YaASHs
    "NAME"                        VARCHAR2(128) NOT NULL,
    "DBID"                        NUMBER,
---- Original columns of GV$ACTIVE_SESSION_HISTORY
    "INST_ID"                     NUMBER,
    "SAMPLE_ID"                   NUMBER,
    "SAMPLE_TIME"                 TIMESTAMP(3),
    "IS_AWR_SAMPLE"               VARCHAR2(1),
    "SESSION_ID"                  NUMBER,
    "SESSION_SERIAL#"             NUMBER,
    "SESSION_TYPE"                VARCHAR2(10),
    "FLAGS"                       NUMBER,
    "USER_ID"                     NUMBER,
    "SQL_ID"                      VARCHAR2(13),
    "IS_SQLID_CURRENT"            VARCHAR2(1),
    "SQL_CHILD_NUMBER"            NUMBER,
    "SQL_OPCODE"                  NUMBER,
    "FORCE_MATCHING_SIGNATURE"    NUMBER,
    "TOP_LEVEL_SQL_ID"            VARCHAR2(13),
    "TOP_LEVEL_SQL_OPCODE"        NUMBER,
    "SQL_OPNAME"                  VARCHAR2(64),
    "SQL_PLAN_HASH_VALUE"         NUMBER,
    "SQL_PLAN_LINE_ID"            NUMBER,
    "SQL_PLAN_OPERATION"          VARCHAR2(30),
    "SQL_PLAN_OPTIONS"            VARCHAR2(30),
    "SQL_EXEC_ID"                 NUMBER,
    "SQL_EXEC_START"              DATE,
    "PLSQL_ENTRY_OBJECT_ID"       NUMBER,
    "PLSQL_ENTRY_SUBPROGRAM_ID"   NUMBER,
    "PLSQL_OBJECT_ID"             NUMBER,
    "PLSQL_SUBPROGRAM_ID"         NUMBER,
    "QC_INSTANCE_ID"              NUMBER,
    "QC_SESSION_ID"               NUMBER,
    "QC_SESSION_SERIAL#"          NUMBER,
    "PX_FLAGS"                    NUMBER,
    "EVENT"                       VARCHAR2(64),
    "EVENT_ID"                    NUMBER,
    "EVENT#"                      NUMBER,
    "SEQ#"                        NUMBER,
    "P1TEXT"                      VARCHAR2(64),
    "P1"                          NUMBER,
    "P2TEXT"                      VARCHAR2(64),
    "P2"                          NUMBER,
    "P3TEXT"                      VARCHAR2(64),
    "P3"                          NUMBER,
    "WAIT_CLASS"                  VARCHAR2(64),
    "WAIT_CLASS_ID"               NUMBER,
    "WAIT_TIME"                   NUMBER,
    "SESSION_STATE"               VARCHAR2(7),
    "TIME_WAITED"                 NUMBER,
    "BLOCKING_SESSION_STATUS"     VARCHAR2(11),
    "BLOCKING_SESSION"            NUMBER,
    "BLOCKING_SESSION_SERIAL#"    NUMBER,
    "BLOCKING_INST_ID"            NUMBER,
    "BLOCKING_HANGCHAIN_INFO"     VARCHAR2(1),
    "CURRENT_OBJ#"                NUMBER,
    "CURRENT_FILE#"               NUMBER,
    "CURRENT_BLOCK#"              NUMBER,
    "CURRENT_ROW#"                NUMBER,
    "TOP_LEVEL_CALL#"             NUMBER,
    "TOP_LEVEL_CALL_NAME"         VARCHAR2(64),
    "CONSUMER_GROUP_ID"           NUMBER,
    "XID"                         RAW(8),
    "REMOTE_INSTANCE#"            NUMBER,
    "TIME_MODEL"                  NUMBER,
    "IN_CONNECTION_MGMT"          VARCHAR2(1),
    "IN_PARSE"                    VARCHAR2(1),
    "IN_HARD_PARSE"               VARCHAR2(1),
    "IN_SQL_EXECUTION"            VARCHAR2(1),
    "IN_PLSQL_EXECUTION"          VARCHAR2(1),
    "IN_PLSQL_RPC"                VARCHAR2(1),
    "IN_PLSQL_COMPILATION"        VARCHAR2(1),
    "IN_JAVA_EXECUTION"           VARCHAR2(1),
    "IN_BIND"                     VARCHAR2(1),
    "IN_CURSOR_CLOSE"             VARCHAR2(1),
    "IN_SEQUENCE_LOAD"            VARCHAR2(1),
    "CAPTURE_OVERHEAD"            VARCHAR2(1),
    "REPLAY_OVERHEAD"             VARCHAR2(1),
    "IS_CAPTURED"                 VARCHAR2(1),
    "IS_REPLAYED"                 VARCHAR2(1),
    "SERVICE_HASH"                NUMBER,
    "PROGRAM"                     VARCHAR2(48),
    "MODULE"                      VARCHAR2(64),
    "ACTION"                      VARCHAR2(64),
    "CLIENT_ID"                   VARCHAR2(64),
    "MACHINE"                     VARCHAR2(64),
    "PORT"                        NUMBER,
    "ECID"                        VARCHAR2(64),
    "DBREPLAY_FILE_ID"            NUMBER,
    "DBREPLAY_CALL_COUNTER"       NUMBER,
    "TM_DELTA_TIME"               NUMBER,
    "TM_DELTA_CPU_TIME"           NUMBER,
    "TM_DELTA_DB_TIME"            NUMBER,
    "DELTA_TIME"                  NUMBER,
    "DELTA_READ_IO_REQUESTS"      NUMBER,
    "DELTA_WRITE_IO_REQUESTS"     NUMBER,
    "DELTA_READ_IO_BYTES"         NUMBER,
    "DELTA_WRITE_IO_BYTES"        NUMBER,
    "DELTA_INTERCONNECT_IO_BYTES" NUMBER,
    "DELTA_READ_MEM_BYTES"        NUMBER,
    "PGA_ALLOCATED"               NUMBER,
    "TEMP_SPACE_ALLOCATED"        NUMBER,
    "CON_DBID"                    NUMBER,
    "CON_ID"                      NUMBER,
    "DBOP_NAME"                   VARCHAR2(30),
    "DBOP_EXEC_ID"                NUMBER
);

-- GV$ACTIVE_SESSION_HISTORY structure from Oracle version 12.2.0.1.0
CREATE TABLE yaashsr.gv$active_session_history_src_12201 (
---- Additional columns NAME and DBID for YaASHs
    "NAME"                        VARCHAR2(128) NOT NULL,
    "DBID"                        NUMBER,
---- Original columns of GV$ACTIVE_SESSION_HISTORY
    "INST_ID"                     NUMBER,
    "SAMPLE_ID"                   NUMBER,
    "SAMPLE_TIME"                 TIMESTAMP(3),
    "SAMPLE_TIME_UTC"             TIMESTAMP(3),
    "USECS_PER_ROW"               NUMBER,
    "IS_AWR_SAMPLE"               VARCHAR2(1),
    "SESSION_ID"                  NUMBER,
    "SESSION_SERIAL#"             NUMBER,
    "SESSION_TYPE"                VARCHAR2(10),
    "FLAGS"                       NUMBER,
    "USER_ID"                     NUMBER,
    "SQL_ID"                      VARCHAR2(13),
    "IS_SQLID_CURRENT"            VARCHAR2(1),
    "SQL_CHILD_NUMBER"            NUMBER,
    "SQL_OPCODE"                  NUMBER,
    "FORCE_MATCHING_SIGNATURE"    NUMBER,
    "TOP_LEVEL_SQL_ID"            VARCHAR2(13),
    "TOP_LEVEL_SQL_OPCODE"        NUMBER,
    "SQL_OPNAME"                  VARCHAR2(64),
    "SQL_ADAPTIVE_PLAN_RESOLVED"  NUMBER,
    "SQL_FULL_PLAN_HASH_VALUE"    NUMBER,
    "SQL_PLAN_HASH_VALUE"         NUMBER,
    "SQL_PLAN_LINE_ID"            NUMBER,
    "SQL_PLAN_OPERATION"          VARCHAR2(30),
    "SQL_PLAN_OPTIONS"            VARCHAR2(30),
    "SQL_EXEC_ID"                 NUMBER,
    "SQL_EXEC_START"              DATE,
    "PLSQL_ENTRY_OBJECT_ID"       NUMBER,
    "PLSQL_ENTRY_SUBPROGRAM_ID"   NUMBER,
    "PLSQL_OBJECT_ID"             NUMBER,
    "PLSQL_SUBPROGRAM_ID"         NUMBER,
    "QC_INSTANCE_ID"              NUMBER,
    "QC_SESSION_ID"               NUMBER,
    "QC_SESSION_SERIAL#"          NUMBER,
    "PX_FLAGS"                    NUMBER,
    "EVENT"                       VARCHAR2(64),
    "EVENT_ID"                    NUMBER,
    "EVENT#"                      NUMBER,
    "SEQ#"                        NUMBER,
    "P1TEXT"                      VARCHAR2(64),
    "P1"                          NUMBER,
    "P2TEXT"                      VARCHAR2(64),
    "P2"                          NUMBER,
    "P3TEXT"                      VARCHAR2(64),
    "P3"                          NUMBER,
    "WAIT_CLASS"                  VARCHAR2(64),
    "WAIT_CLASS_ID"               NUMBER,
    "WAIT_TIME"                   NUMBER,
    "SESSION_STATE"               VARCHAR2(7),
    "TIME_WAITED"                 NUMBER,
    "BLOCKING_SESSION_STATUS"     VARCHAR2(11),
    "BLOCKING_SESSION"            NUMBER,
    "BLOCKING_SESSION_SERIAL#"    NUMBER,
    "BLOCKING_INST_ID"            NUMBER,
    "BLOCKING_HANGCHAIN_INFO"     VARCHAR2(1),
    "CURRENT_OBJ#"                NUMBER,
    "CURRENT_FILE#"               NUMBER,
    "CURRENT_BLOCK#"              NUMBER,
    "CURRENT_ROW#"                NUMBER,
    "TOP_LEVEL_CALL#"             NUMBER,
    "TOP_LEVEL_CALL_NAME"         VARCHAR2(64),
    "CONSUMER_GROUP_ID"           NUMBER,
    "XID"                         RAW(8),
    "REMOTE_INSTANCE#"            NUMBER,
    "TIME_MODEL"                  NUMBER,
    "IN_CONNECTION_MGMT"          VARCHAR2(1),
    "IN_PARSE"                    VARCHAR2(1),
    "IN_HARD_PARSE"               VARCHAR2(1),
    "IN_SQL_EXECUTION"            VARCHAR2(1),
    "IN_PLSQL_EXECUTION"          VARCHAR2(1),
    "IN_PLSQL_RPC"                VARCHAR2(1),
    "IN_PLSQL_COMPILATION"        VARCHAR2(1),
    "IN_JAVA_EXECUTION"           VARCHAR2(1),
    "IN_BIND"                     VARCHAR2(1),
    "IN_CURSOR_CLOSE"             VARCHAR2(1),
    "IN_SEQUENCE_LOAD"            VARCHAR2(1),
    "IN_INMEMORY_QUERY"           VARCHAR2(1),
    "IN_INMEMORY_POPULATE"        VARCHAR2(1),
    "IN_INMEMORY_PREPOPULATE"     VARCHAR2(1),
    "IN_INMEMORY_REPOPULATE"      VARCHAR2(1),
    "IN_INMEMORY_TREPOPULATE"     VARCHAR2(1),
    "IN_TABLESPACE_ENCRYPTION"    VARCHAR2(1),
    "CAPTURE_OVERHEAD"            VARCHAR2(1),
    "REPLAY_OVERHEAD"             VARCHAR2(1),
    "IS_CAPTURED"                 VARCHAR2(1),
    "IS_REPLAYED"                 VARCHAR2(1),
    "IS_REPLAY_SYNC_TOKEN_HOLDER" VARCHAR2(1),
    "SERVICE_HASH"                NUMBER,
    "PROGRAM"                     VARCHAR2(48),
    "MODULE"                      VARCHAR2(64),
    "ACTION"                      VARCHAR2(64),
    "CLIENT_ID"                   VARCHAR2(64),
    "MACHINE"                     VARCHAR2(64),
    "PORT"                        NUMBER,
    "ECID"                        VARCHAR2(64),
    "DBREPLAY_FILE_ID"            NUMBER,
    "DBREPLAY_CALL_COUNTER"       NUMBER,
    "TM_DELTA_TIME"               NUMBER,
    "TM_DELTA_CPU_TIME"           NUMBER,
    "TM_DELTA_DB_TIME"            NUMBER,
    "DELTA_TIME"                  NUMBER,
    "DELTA_READ_IO_REQUESTS"      NUMBER,
    "DELTA_WRITE_IO_REQUESTS"     NUMBER,
    "DELTA_READ_IO_BYTES"         NUMBER,
    "DELTA_WRITE_IO_BYTES"        NUMBER,
    "DELTA_INTERCONNECT_IO_BYTES" NUMBER,
    "DELTA_READ_MEM_BYTES"        NUMBER,
    "PGA_ALLOCATED"               NUMBER,
    "TEMP_SPACE_ALLOCATED"        NUMBER,
    "CON_DBID"                    NUMBER,
    "CON_ID"                      NUMBER,
    "DBOP_NAME"                   VARCHAR2(30),
    "DBOP_EXEC_ID"                NUMBER
);

-- GV$ACTIVE_SESSION_HISTORY structure from Oracle version 18.3
CREATE TABLE yaashsr.gv$active_session_history_src_183 (
---- Additional columns NAME and DBID for YaASHs
    "NAME"                        VARCHAR2(128) NOT NULL,
    "DBID"                        NUMBER,
---- Original columns of GV$ACTIVE_SESSION_HISTORY
    "INST_ID"                     NUMBER,
    "SAMPLE_ID"                   NUMBER,
    "SAMPLE_TIME"                 TIMESTAMP(3),
    "SAMPLE_TIME_UTC"             TIMESTAMP(3),
    "USECS_PER_ROW"               NUMBER,
    "IS_AWR_SAMPLE"               VARCHAR2(1),
    "SESSION_ID"                  NUMBER,
    "SESSION_SERIAL#"             NUMBER,
    "SESSION_TYPE"                VARCHAR2(10),
    "FLAGS"                       NUMBER,
    "USER_ID"                     NUMBER,
    "SQL_ID"                      VARCHAR2(13),
    "IS_SQLID_CURRENT"            VARCHAR2(1),
    "SQL_CHILD_NUMBER"            NUMBER,
    "SQL_OPCODE"                  NUMBER,
    "FORCE_MATCHING_SIGNATURE"    NUMBER,
    "TOP_LEVEL_SQL_ID"            VARCHAR2(13),
    "TOP_LEVEL_SQL_OPCODE"        NUMBER,
    "SQL_OPNAME"                  VARCHAR2(64),
    "SQL_ADAPTIVE_PLAN_RESOLVED"  NUMBER,
    "SQL_FULL_PLAN_HASH_VALUE"    NUMBER,
    "SQL_PLAN_HASH_VALUE"         NUMBER,
    "SQL_PLAN_LINE_ID"            NUMBER,
    "SQL_PLAN_OPERATION"          VARCHAR2(30),
    "SQL_PLAN_OPTIONS"            VARCHAR2(30),
    "SQL_EXEC_ID"                 NUMBER,
    "SQL_EXEC_START"              DATE,
    "PLSQL_ENTRY_OBJECT_ID"       NUMBER,
    "PLSQL_ENTRY_SUBPROGRAM_ID"   NUMBER,
    "PLSQL_OBJECT_ID"             NUMBER,
    "PLSQL_SUBPROGRAM_ID"         NUMBER,
    "QC_INSTANCE_ID"              NUMBER,
    "QC_SESSION_ID"               NUMBER,
    "QC_SESSION_SERIAL#"          NUMBER,
    "PX_FLAGS"                    NUMBER,
    "EVENT"                       VARCHAR2(64),
    "EVENT_ID"                    NUMBER,
    "EVENT#"                      NUMBER,
    "SEQ#"                        NUMBER,
    "P1TEXT"                      VARCHAR2(64),
    "P1"                          NUMBER,
    "P2TEXT"                      VARCHAR2(64),
    "P2"                          NUMBER,
    "P3TEXT"                      VARCHAR2(64),
    "P3"                          NUMBER,
    "WAIT_CLASS"                  VARCHAR2(64),
    "WAIT_CLASS_ID"               NUMBER,
    "WAIT_TIME"                   NUMBER,
    "SESSION_STATE"               VARCHAR2(7),
    "TIME_WAITED"                 NUMBER,
    "BLOCKING_SESSION_STATUS"     VARCHAR2(11),
    "BLOCKING_SESSION"            NUMBER,
    "BLOCKING_SESSION_SERIAL#"    NUMBER,
    "BLOCKING_INST_ID"            NUMBER,
    "BLOCKING_HANGCHAIN_INFO"     VARCHAR2(1),
    "CURRENT_OBJ#"                NUMBER,
    "CURRENT_FILE#"               NUMBER,
    "CURRENT_BLOCK#"              NUMBER,
    "CURRENT_ROW#"                NUMBER,
    "TOP_LEVEL_CALL#"             NUMBER,
    "TOP_LEVEL_CALL_NAME"         VARCHAR2(64),
    "CONSUMER_GROUP_ID"           NUMBER,
    "XID"                         RAW(8),
    "REMOTE_INSTANCE#"            NUMBER,
    "TIME_MODEL"                  NUMBER,
    "IN_CONNECTION_MGMT"          VARCHAR2(1),
    "IN_PARSE"                    VARCHAR2(1),
    "IN_HARD_PARSE"               VARCHAR2(1),
    "IN_SQL_EXECUTION"            VARCHAR2(1),
    "IN_PLSQL_EXECUTION"          VARCHAR2(1),
    "IN_PLSQL_RPC"                VARCHAR2(1),
    "IN_PLSQL_COMPILATION"        VARCHAR2(1),
    "IN_JAVA_EXECUTION"           VARCHAR2(1),
    "IN_BIND"                     VARCHAR2(1),
    "IN_CURSOR_CLOSE"             VARCHAR2(1),
    "IN_SEQUENCE_LOAD"            VARCHAR2(1),
    "IN_INMEMORY_QUERY"           VARCHAR2(1),
    "IN_INMEMORY_POPULATE"        VARCHAR2(1),
    "IN_INMEMORY_PREPOPULATE"     VARCHAR2(1),
    "IN_INMEMORY_REPOPULATE"      VARCHAR2(1),
    "IN_INMEMORY_TREPOPULATE"     VARCHAR2(1),
    "IN_TABLESPACE_ENCRYPTION"    VARCHAR2(1),
    "CAPTURE_OVERHEAD"            VARCHAR2(1),
    "REPLAY_OVERHEAD"             VARCHAR2(1),
    "IS_CAPTURED"                 VARCHAR2(1),
    "IS_REPLAYED"                 VARCHAR2(1),
    "IS_REPLAY_SYNC_TOKEN_HOLDER" VARCHAR2(1),
    "SERVICE_HASH"                NUMBER,
    "PROGRAM"                     VARCHAR2(48),
    "MODULE"                      VARCHAR2(64),
    "ACTION"                      VARCHAR2(64),
    "CLIENT_ID"                   VARCHAR2(64),
    "MACHINE"                     VARCHAR2(64),
    "PORT"                        NUMBER,
    "ECID"                        VARCHAR2(64),
    "DBREPLAY_FILE_ID"            NUMBER,
    "DBREPLAY_CALL_COUNTER"       NUMBER,
    "TM_DELTA_TIME"               NUMBER,
    "TM_DELTA_CPU_TIME"           NUMBER,
    "TM_DELTA_DB_TIME"            NUMBER,
    "DELTA_TIME"                  NUMBER,
    "DELTA_READ_IO_REQUESTS"      NUMBER,
    "DELTA_WRITE_IO_REQUESTS"     NUMBER,
    "DELTA_READ_IO_BYTES"         NUMBER,
    "DELTA_WRITE_IO_BYTES"        NUMBER,
    "DELTA_INTERCONNECT_IO_BYTES" NUMBER,
    "DELTA_READ_MEM_BYTES"        NUMBER,
    "PGA_ALLOCATED"               NUMBER,
    "TEMP_SPACE_ALLOCATED"        NUMBER,
    "CON_DBID"                    NUMBER,
    "CON_ID"                      NUMBER,
    "DBOP_NAME"                   VARCHAR2(30),
    "DBOP_EXEC_ID"                NUMBER
);

-- GV$ACTIVE_SESSION_HISTORY structure from Oracle version 19.11
CREATE TABLE yaashsr.gv$active_session_history_src_1911 (
---- Additional columns NAME and DBID for YaASHs
    "NAME"                        VARCHAR2(128) NOT NULL,
    "DBID"                        NUMBER,
---- Original columns of GV$ACTIVE_SESSION_HISTORY
    "INST_ID"                     NUMBER,
    "SAMPLE_ID"                   NUMBER,
    "SAMPLE_TIME"                 TIMESTAMP(3),
    "SAMPLE_TIME_UTC"             TIMESTAMP(3),
    "USECS_PER_ROW"               NUMBER,
    "IS_AWR_SAMPLE"               VARCHAR2(1),
    "SESSION_ID"                  NUMBER,
    "SESSION_SERIAL#"             NUMBER,
    "SESSION_TYPE"                VARCHAR2(10),
    "FLAGS"                       NUMBER,
    "USER_ID"                     NUMBER,
    "SQL_ID"                      VARCHAR2(13),
    "IS_SQLID_CURRENT"            VARCHAR2(1),
    "SQL_CHILD_NUMBER"            NUMBER,
    "SQL_OPCODE"                  NUMBER,
    "FORCE_MATCHING_SIGNATURE"    NUMBER,
    "TOP_LEVEL_SQL_ID"            VARCHAR2(13),
    "TOP_LEVEL_SQL_OPCODE"        NUMBER,
    "SQL_OPNAME"                  VARCHAR2(64),
    "SQL_ADAPTIVE_PLAN_RESOLVED"  NUMBER,
    "SQL_FULL_PLAN_HASH_VALUE"    NUMBER,
    "SQL_PLAN_HASH_VALUE"         NUMBER,
    "SQL_PLAN_LINE_ID"            NUMBER,
    "SQL_PLAN_OPERATION"          VARCHAR2(30),
    "SQL_PLAN_OPTIONS"            VARCHAR2(30),
    "SQL_EXEC_ID"                 NUMBER,
    "SQL_EXEC_START"              DATE,
    "PLSQL_ENTRY_OBJECT_ID"       NUMBER,
    "PLSQL_ENTRY_SUBPROGRAM_ID"   NUMBER,
    "PLSQL_OBJECT_ID"             NUMBER,
    "PLSQL_SUBPROGRAM_ID"         NUMBER,
    "QC_INSTANCE_ID"              NUMBER,
    "QC_SESSION_ID"               NUMBER,
    "QC_SESSION_SERIAL#"          NUMBER,
    "PX_FLAGS"                    NUMBER,
    "EVENT"                       VARCHAR2(64),
    "EVENT_ID"                    NUMBER,
    "EVENT#"                      NUMBER,
    "SEQ#"                        NUMBER,
    "P1TEXT"                      VARCHAR2(64),
    "P1"                          NUMBER,
    "P2TEXT"                      VARCHAR2(64),
    "P2"                          NUMBER,
    "P3TEXT"                      VARCHAR2(64),
    "P3"                          NUMBER,
    "WAIT_CLASS"                  VARCHAR2(64),
    "WAIT_CLASS_ID"               NUMBER,
    "WAIT_TIME"                   NUMBER,
    "SESSION_STATE"               VARCHAR2(7),
    "TIME_WAITED"                 NUMBER,
    "BLOCKING_SESSION_STATUS"     VARCHAR2(11),
    "BLOCKING_SESSION"            NUMBER,
    "BLOCKING_SESSION_SERIAL#"    NUMBER,
    "BLOCKING_INST_ID"            NUMBER,
    "BLOCKING_HANGCHAIN_INFO"     VARCHAR2(1),
    "CURRENT_OBJ#"                NUMBER,
    "CURRENT_FILE#"               NUMBER,
    "CURRENT_BLOCK#"              NUMBER,
    "CURRENT_ROW#"                NUMBER,
    "TOP_LEVEL_CALL#"             NUMBER,
    "TOP_LEVEL_CALL_NAME"         VARCHAR2(64),
    "CONSUMER_GROUP_ID"           NUMBER,
    "XID"                         RAW(8),
    "REMOTE_INSTANCE#"            NUMBER,
    "TIME_MODEL"                  NUMBER,
    "IN_CONNECTION_MGMT"          VARCHAR2(1),
    "IN_PARSE"                    VARCHAR2(1),
    "IN_HARD_PARSE"               VARCHAR2(1),
    "IN_SQL_EXECUTION"            VARCHAR2(1),
    "IN_PLSQL_EXECUTION"          VARCHAR2(1),
    "IN_PLSQL_RPC"                VARCHAR2(1),
    "IN_PLSQL_COMPILATION"        VARCHAR2(1),
    "IN_JAVA_EXECUTION"           VARCHAR2(1),
    "IN_BIND"                     VARCHAR2(1),
    "IN_CURSOR_CLOSE"             VARCHAR2(1),
    "IN_SEQUENCE_LOAD"            VARCHAR2(1),
    "IN_INMEMORY_QUERY"           VARCHAR2(1),
    "IN_INMEMORY_POPULATE"        VARCHAR2(1),
    "IN_INMEMORY_PREPOPULATE"     VARCHAR2(1),
    "IN_INMEMORY_REPOPULATE"      VARCHAR2(1),
    "IN_INMEMORY_TREPOPULATE"     VARCHAR2(1),
    "IN_TABLESPACE_ENCRYPTION"    VARCHAR2(1),
    "CAPTURE_OVERHEAD"            VARCHAR2(1),
    "REPLAY_OVERHEAD"             VARCHAR2(1),
    "IS_CAPTURED"                 VARCHAR2(1),
    "IS_REPLAYED"                 VARCHAR2(1),
    "IS_REPLAY_SYNC_TOKEN_HOLDER" VARCHAR2(1),
    "SERVICE_HASH"                NUMBER,
    "PROGRAM"                     VARCHAR2(48),
    "MODULE"                      VARCHAR2(64),
    "ACTION"                      VARCHAR2(64),
    "CLIENT_ID"                   VARCHAR2(64),
    "MACHINE"                     VARCHAR2(64),
    "PORT"                        NUMBER,
    "ECID"                        VARCHAR2(64),
    "DBREPLAY_FILE_ID"            NUMBER,
    "DBREPLAY_CALL_COUNTER"       NUMBER,
    "TM_DELTA_TIME"               NUMBER,
    "TM_DELTA_CPU_TIME"           NUMBER,
    "TM_DELTA_DB_TIME"            NUMBER,
    "DELTA_TIME"                  NUMBER,
    "DELTA_READ_IO_REQUESTS"      NUMBER,
    "DELTA_WRITE_IO_REQUESTS"     NUMBER,
    "DELTA_READ_IO_BYTES"         NUMBER,
    "DELTA_WRITE_IO_BYTES"        NUMBER,
    "DELTA_INTERCONNECT_IO_BYTES" NUMBER,
    "DELTA_READ_MEM_BYTES"        NUMBER,
    "PGA_ALLOCATED"               NUMBER,
    "TEMP_SPACE_ALLOCATED"        NUMBER,
    "CON_DBID"                    NUMBER,
    "CON_ID"                      NUMBER,
    "DBOP_NAME"                   VARCHAR2(30),
    "DBOP_EXEC_ID"                NUMBER
);

CREATE SYNONYM yaashsr.gv$active_session_history_current_src FOR yaashsr.gv$active_session_history_src_1911;

DECLARE
    l_sqltext VARCHAR2(4000);
BEGIN
    FOR l_counter IN 1..31 LOOP
        l_sqltext := 'CREATE TABLE yaashsr.ash_samples_day_' || l_counter || ' as select * from yaashsr.gv$active_session_history_current_src';
        EXECUTE IMMEDIATE l_sqltext;
    END LOOP;
END;
/

CREATE TABLE yaashsr.sql (
    sql_id   VARCHAR2(13) NOT NULL,
    sql_text VARCHAR2(1000) NOT NULL
);

---------------------------------------------------------------------------------------------
-- Indexes
---------------------------------------------------------------------------------------------
CREATE UNIQUE INDEX yaashsr.advanced_view_def_version on yaashsr.advanced_view_def(version);
CREATE UNIQUE INDEX yaashsr.col_mapping_version_type on yaashsr.col_mapping(version,type);
CREATE UNIQUE INDEX yaashsr.configuration_name ON yaashsr.configuration(name);
CREATE INDEX yaashsr.messages_time ON yaashsr.messages(time);
CREATE UNIQUE INDEX yaashsr.targets_name_instance_dbid ON yaashsr.targets(name,instance_number,dbid);
CREATE UNIQUE INDEX yaashsr.sql_sql_id ON yaashsr.sql(sql_id);

DECLARE
    l_sqltext VARCHAR2(4000);
BEGIN

    FOR l_counter IN 1..31 LOOP
        l_sqltext := 'CREATE INDEX yaashsr.ash_samples_day_' || l_counter || '_sampletime on yaashsr.ash_samples_day_' || l_counter || '(sample_time)';
        EXECUTE IMMEDIATE l_sqltext;
    END LOOP;
END;
/

---------------------------------------------------------------------------------------------
-- Views
---------------------------------------------------------------------------------------------
DECLARE
    l_day     VARCHAR2(2);
    l_sqltext VARCHAR2(4000);
BEGIN
    SELECT
        TO_NUMBER(TO_CHAR(SYSDATE, 'DD'))
    INTO l_day
    FROM
        dual;

    l_sqltext := 'CREATE VIEW yaashsr.active_session_history_daily as select * from yaashsr.ash_samples_day_' || l_day;
    EXECUTE IMMEDIATE l_sqltext;
END;
/

DECLARE
    l_sqltext VARCHAR2(4000);
BEGIN
    l_sqltext := 'CREATE VIEW yaashsr.active_session_history_all as ';
    FOR l_counter IN 1..31 LOOP
        l_sqltext := l_sqltext || 'select * from yaashsr.ash_samples_day_' || l_counter || ' UNION ALL ';
    END LOOP;

    l_sqltext := substr(l_sqltext, 1, length(l_sqltext) - 11);
    EXECUTE IMMEDIATE l_sqltext;
    l_sqltext := 'CREATE SYNONYM yaashsr.gv$active_session_history FOR yaashsr.active_session_history_all';
    EXECUTE IMMEDIATE l_sqltext;
    l_sqltext := 'CREATE SYNONYM yaashsr.v$active_session_history FOR yaashsr.active_session_history_all';
    EXECUTE IMMEDIATE l_sqltext;
    l_sqltext := 'CREATE SYNONYM yaashsr.dba_hist_active_sess_history FOR yaashsr.active_session_history_all';
    EXECUTE IMMEDIATE l_sqltext;
END;
/

---------------------------------------------------------------------------------------------
-- Sequences
---------------------------------------------------------------------------------------------
CREATE SEQUENCE yaashsr.sample_id START WITH 1 INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 CYCLE CACHE 900;

---------------------------------------------------------------------------------------------
-- Data (Defaults)
---------------------------------------------------------------------------------------------
INSERT INTO yaashsr.configuration (name,value) VALUES ('RETENTION_DAYS','14');
INSERT INTO yaashsr.configuration (name,value) VALUES ('SAMPLEFREQ_SEC','1');
INSERT INTO yaashsr.configuration (name,value) VALUES ('SAMPLEDURA_SEC','900');
INSERT INTO yaashsr.configuration (name,value) VALUES ('SAMPLE_IDLE','NO');
INSERT INTO yaashsr.col_mapping (version,type,col_sess,col_ashs) VALUES ('10.2','STANDARD','SID,SERIAL#,USER#,TYPE,SQL_ID,SQL_CHILD_NUMBER,COMMAND,decode(STATE,''WAITING'',EVENT,NULL),decode(STATE,''WAITING'',EVENT#,NULL),decode(STATE,''WAITING'',P1TEXT,NULL),decode(STATE,''WAITING'',P1,NULL),decode(STATE,''WAITING'',P2TEXT,NULL),decode(STATE,''WAITING'',P2,NULL),decode(STATE,''WAITING'',P3TEXT,NULL),decode(STATE,''WAITING'',P3,NULL),decode(STATE,''WAITING'',WAIT_CLASS,NULL),decode(STATE,''WAITING'',WAIT_CLASS_ID,NULL),decode(STATE,''WAITING'',''WAITING'',''ON CPU''),MODULE,PROGRAM,ACTION,CLIENT_IDENTIFIER,MACHINE,PORT,BLOCKING_SESSION_STATUS,BLOCKING_INSTANCE,BLOCKING_SESSION,ROW_WAIT_OBJ#,ROW_WAIT_FILE#,ROW_WAIT_BLOCK#,ROW_WAIT_ROW#,COMMAND,PLSQL_ENTRY_OBJECT_ID,PLSQL_ENTRY_SUBPROGRAM_ID,PLSQL_OBJECT_ID,PLSQL_SUBPROGRAM_ID,SEQ#,WAIT_TIME,ECID','SESSION_ID,SESSION_SERIAL#,USER_ID,SESSION_TYPE,SQL_ID,SQL_CHILD_NUMBER,SQL_OPCODE,EVENT,EVENT#,P1TEXT,P1,P2TEXT,P2,P3TEXT,P3,WAIT_CLASS,WAIT_CLASS_ID,SESSION_STATE,MODULE,PROGRAM,ACTION,CLIENT_ID,MACHINE,PORT,BLOCKING_SESSION_STATUS,BLOCKING_INST_ID,BLOCKING_SESSION,CURRENT_OBJ#,CURRENT_FILE#,CURRENT_BLOCK#,CURRENT_ROW#,SQL_OPNAME,PLSQL_ENTRY_OBJECT_ID,PLSQL_ENTRY_SUBPROGRAM_ID,PLSQL_OBJECT_ID,PLSQL_SUBPROGRAM_ID,SEQ#,WAIT_TIME,ECID');
INSERT INTO yaashsr.col_mapping (version,type,col_sess,col_ashs) VALUES ('11.2','ADVANCED',',YAASHS_SQL_PLAN_HASH_VALUE,YAASHS_TIME_MODEL,YAASHS_IN_CONNECTION_MGMT,YAASHS_IN_PARSE,YAASHS_IN_HARD_PARSE,YAASHS_IN_SQL_EXECUTION,YAASHS_IN_PLSQL_EXECUTION,YAASHS_IN_PLSQL_RPC,YAASHS_IN_PLSQL_COMPILATION,YAASHS_IN_JAVA_EXECUTION,YAASHS_IN_BIND,YAASHS_IN_CURSOR_CLOSE,YAASHS_IN_SEQUENCE_LOAD,YAASHS_IN_INMEMORY_QUERY,YAASHS_IN_INMEMORY_POPULATE,YAASHS_IN_INMEMORY_PREPOPULATE,YAASHS_IN_INMEMORY_REPOPULATE,YAASHS_IN_INMEMORY_TREPOPULATE,YAASHS_IN_TBS_ENCRYPTION',',SQL_PLAN_HASH_VALUE,TIME_MODEL,IN_CONNECTION_MGMT,IN_PARSE,IN_HARD_PARSE,IN_SQL_EXECUTION,IN_PLSQL_EXECUTION,IN_PLSQL_RPC,IN_PLSQL_COMPILATION,IN_JAVA_EXECUTION,IN_BIND,IN_CURSOR_CLOSE,IN_SEQUENCE_LOAD,IN_INMEMORY_QUERY,IN_INMEMORY_POPULATE,IN_INMEMORY_PREPOPULATE,IN_INMEMORY_REPOPULATE,IN_INMEMORY_TREPOPULATE,IN_TABLESPACE_ENCRYPTION');
INSERT INTO yaashsr.col_mapping (version,type,col_sess,col_ashs) VALUES ('11.2','STANDARD','SID,SERIAL#,USER#,TYPE,SQL_ID,SQL_CHILD_NUMBER,SQL_EXEC_ID,SQL_EXEC_START,COMMAND,decode(STATE,''WAITING'',EVENT,NULL),decode(STATE,''WAITING'',EVENT#,NULL),decode(STATE,''WAITING'',P1TEXT,NULL),decode(STATE,''WAITING'',P1,NULL),decode(STATE,''WAITING'',P2TEXT,NULL),decode(STATE,''WAITING'',P2,NULL),decode(STATE,''WAITING'',P3TEXT,NULL),decode(STATE,''WAITING'',P3,NULL),decode(STATE,''WAITING'',WAIT_CLASS,NULL),decode(STATE,''WAITING'',WAIT_CLASS_ID,NULL),decode(STATE,''WAITING'',''WAITING'',''ON CPU''),MODULE,PROGRAM,ACTION,CLIENT_IDENTIFIER,MACHINE,PORT,BLOCKING_SESSION_STATUS,BLOCKING_INSTANCE,BLOCKING_SESSION,ROW_WAIT_OBJ#,ROW_WAIT_FILE#,ROW_WAIT_BLOCK#,ROW_WAIT_ROW#,TOP_LEVEL_CALL#,COMMAND,PLSQL_ENTRY_OBJECT_ID,PLSQL_ENTRY_SUBPROGRAM_ID,PLSQL_OBJECT_ID,PLSQL_SUBPROGRAM_ID,SEQ#,WAIT_TIME,ECID','SESSION_ID,SESSION_SERIAL#,USER_ID,SESSION_TYPE,SQL_ID,SQL_CHILD_NUMBER,SQL_EXEC_ID,SQL_EXEC_START,SQL_OPCODE,EVENT,EVENT#,P1TEXT,P1,P2TEXT,P2,P3TEXT,P3,WAIT_CLASS,WAIT_CLASS_ID,SESSION_STATE,MODULE,PROGRAM,ACTION,CLIENT_ID,MACHINE,PORT,BLOCKING_SESSION_STATUS,BLOCKING_INST_ID,BLOCKING_SESSION,CURRENT_OBJ#,CURRENT_FILE#,CURRENT_BLOCK#,CURRENT_ROW#,TOP_LEVEL_CALL#,SQL_OPNAME,PLSQL_ENTRY_OBJECT_ID,PLSQL_ENTRY_SUBPROGRAM_ID,PLSQL_OBJECT_ID,PLSQL_SUBPROGRAM_ID,SEQ#,WAIT_TIME,ECID');
INSERT INTO yaashsr.col_mapping (version,type,col_sess,col_ashs) VALUES ('12.1','ADVANCED',',YAASHS_SQL_PLAN_HASH_VALUE,YAASHS_TIME_MODEL,YAASHS_IN_CONNECTION_MGMT,YAASHS_IN_PARSE,YAASHS_IN_HARD_PARSE,YAASHS_IN_SQL_EXECUTION,YAASHS_IN_PLSQL_EXECUTION,YAASHS_IN_PLSQL_RPC,YAASHS_IN_PLSQL_COMPILATION,YAASHS_IN_JAVA_EXECUTION,YAASHS_IN_BIND,YAASHS_IN_CURSOR_CLOSE,YAASHS_IN_SEQUENCE_LOAD,YAASHS_IN_INMEMORY_QUERY,YAASHS_IN_INMEMORY_POPULATE,YAASHS_IN_INMEMORY_PREPOPULATE,YAASHS_IN_INMEMORY_REPOPULATE,YAASHS_IN_INMEMORY_TREPOPULATE,YAASHS_IN_TBS_ENCRYPTION',',SQL_PLAN_HASH_VALUE,TIME_MODEL,IN_CONNECTION_MGMT,IN_PARSE,IN_HARD_PARSE,IN_SQL_EXECUTION,IN_PLSQL_EXECUTION,IN_PLSQL_RPC,IN_PLSQL_COMPILATION,IN_JAVA_EXECUTION,IN_BIND,IN_CURSOR_CLOSE,IN_SEQUENCE_LOAD,IN_INMEMORY_QUERY,IN_INMEMORY_POPULATE,IN_INMEMORY_PREPOPULATE,IN_INMEMORY_REPOPULATE,IN_INMEMORY_TREPOPULATE,IN_TABLESPACE_ENCRYPTION');
INSERT INTO yaashsr.col_mapping (version,type,col_sess,col_ashs) VALUES ('12.1','STANDARD','SID,SERIAL#,USER#,TYPE,SQL_ID,SQL_CHILD_NUMBER,SQL_EXEC_ID,SQL_EXEC_START,COMMAND,decode(STATE,''WAITING'',EVENT,NULL),decode(STATE,''WAITING'',EVENT#,NULL),decode(STATE,''WAITING'',P1TEXT,NULL),decode(STATE,''WAITING'',P1,NULL),decode(STATE,''WAITING'',P2TEXT,NULL),decode(STATE,''WAITING'',P2,NULL),decode(STATE,''WAITING'',P3TEXT,NULL),decode(STATE,''WAITING'',P3,NULL),decode(STATE,''WAITING'',WAIT_CLASS,NULL),decode(STATE,''WAITING'',WAIT_CLASS_ID,NULL),decode(STATE,''WAITING'',''WAITING'',''ON CPU''),MODULE,PROGRAM,ACTION,CLIENT_IDENTIFIER,MACHINE,PORT,BLOCKING_SESSION_STATUS,BLOCKING_INSTANCE,BLOCKING_SESSION,ROW_WAIT_OBJ#,ROW_WAIT_FILE#,ROW_WAIT_BLOCK#,ROW_WAIT_ROW#,TOP_LEVEL_CALL#,COMMAND,PLSQL_ENTRY_OBJECT_ID,PLSQL_ENTRY_SUBPROGRAM_ID,PLSQL_OBJECT_ID,PLSQL_SUBPROGRAM_ID,SEQ#,WAIT_TIME,ECID,CON_ID','SESSION_ID,SESSION_SERIAL#,USER_ID,SESSION_TYPE,SQL_ID,SQL_CHILD_NUMBER,SQL_EXEC_ID,SQL_EXEC_START,SQL_OPCODE,EVENT,EVENT#,P1TEXT,P1,P2TEXT,P2,P3TEXT,P3,WAIT_CLASS,WAIT_CLASS_ID,SESSION_STATE,MODULE,PROGRAM,ACTION,CLIENT_ID,MACHINE,PORT,BLOCKING_SESSION_STATUS,BLOCKING_INST_ID,BLOCKING_SESSION,CURRENT_OBJ#,CURRENT_FILE#,CURRENT_BLOCK#,CURRENT_ROW#,TOP_LEVEL_CALL#,SQL_OPNAME,PLSQL_ENTRY_OBJECT_ID,PLSQL_ENTRY_SUBPROGRAM_ID,PLSQL_OBJECT_ID,PLSQL_SUBPROGRAM_ID,SEQ#,WAIT_TIME,ECID,CON_ID');
INSERT INTO yaashsr.col_mapping (version,type,col_sess,col_ashs) VALUES ('12.2','ADVANCED',',YAASHS_SQL_PLAN_HASH_VALUE,YAASHS_TIME_MODEL,YAASHS_IN_CONNECTION_MGMT,YAASHS_IN_PARSE,YAASHS_IN_HARD_PARSE,YAASHS_IN_SQL_EXECUTION,YAASHS_IN_PLSQL_EXECUTION,YAASHS_IN_PLSQL_RPC,YAASHS_IN_PLSQL_COMPILATION,YAASHS_IN_JAVA_EXECUTION,YAASHS_IN_BIND,YAASHS_IN_CURSOR_CLOSE,YAASHS_IN_SEQUENCE_LOAD,YAASHS_IN_INMEMORY_QUERY,YAASHS_IN_INMEMORY_POPULATE,YAASHS_IN_INMEMORY_PREPOPULATE,YAASHS_IN_INMEMORY_REPOPULATE,YAASHS_IN_INMEMORY_TREPOPULATE,YAASHS_IN_TABLESPACE_ENCRYPTION',',SQL_PLAN_HASH_VALUE,TIME_MODEL,IN_CONNECTION_MGMT,IN_PARSE,IN_HARD_PARSE,IN_SQL_EXECUTION,IN_PLSQL_EXECUTION,IN_PLSQL_RPC,IN_PLSQL_COMPILATION,IN_JAVA_EXECUTION,IN_BIND,IN_CURSOR_CLOSE,IN_SEQUENCE_LOAD,IN_INMEMORY_QUERY,IN_INMEMORY_POPULATE,IN_INMEMORY_PREPOPULATE,IN_INMEMORY_REPOPULATE,IN_INMEMORY_TREPOPULATE,IN_TABLESPACE_ENCRYPTION');
INSERT INTO yaashsr.col_mapping (version,type,col_sess,col_ashs) VALUES ('12.2','STANDARD','SID,SERIAL#,USER#,TYPE,SQL_ID,SQL_CHILD_NUMBER,SQL_EXEC_ID,SQL_EXEC_START,COMMAND,decode(STATE,''WAITING'',EVENT,NULL),decode(STATE,''WAITING'',EVENT#,NULL),decode(STATE,''WAITING'',P1TEXT,NULL),decode(STATE,''WAITING'',P1,NULL),decode(STATE,''WAITING'',P2TEXT,NULL),decode(STATE,''WAITING'',P2,NULL),decode(STATE,''WAITING'',P3TEXT,NULL),decode(STATE,''WAITING'',P3,NULL),decode(STATE,''WAITING'',WAIT_CLASS,NULL),decode(STATE,''WAITING'',WAIT_CLASS_ID,NULL),decode(STATE,''WAITING'',''WAITING'',''ON CPU''),MODULE,PROGRAM,ACTION,CLIENT_IDENTIFIER,MACHINE,PORT,BLOCKING_SESSION_STATUS,BLOCKING_INSTANCE,BLOCKING_SESSION,ROW_WAIT_OBJ#,ROW_WAIT_FILE#,ROW_WAIT_BLOCK#,ROW_WAIT_ROW#,TOP_LEVEL_CALL#,COMMAND,PLSQL_ENTRY_OBJECT_ID,PLSQL_ENTRY_SUBPROGRAM_ID,PLSQL_OBJECT_ID,PLSQL_SUBPROGRAM_ID,SEQ#,WAIT_TIME,ECID,CON_ID','SESSION_ID,SESSION_SERIAL#,USER_ID,SESSION_TYPE,SQL_ID,SQL_CHILD_NUMBER,SQL_EXEC_ID,SQL_EXEC_START,SQL_OPCODE,EVENT,EVENT#,P1TEXT,P1,P2TEXT,P2,P3TEXT,P3,WAIT_CLASS,WAIT_CLASS_ID,SESSION_STATE,MODULE,PROGRAM,ACTION,CLIENT_ID,MACHINE,PORT,BLOCKING_SESSION_STATUS,BLOCKING_INST_ID,BLOCKING_SESSION,CURRENT_OBJ#,CURRENT_FILE#,CURRENT_BLOCK#,CURRENT_ROW#,TOP_LEVEL_CALL#,SQL_OPNAME,PLSQL_ENTRY_OBJECT_ID,PLSQL_ENTRY_SUBPROGRAM_ID,PLSQL_OBJECT_ID,PLSQL_SUBPROGRAM_ID,SEQ#,WAIT_TIME,ECID,CON_ID');
INSERT INTO yaashsr.col_mapping (version,type,col_sess,col_ashs) VALUES ('18.0','ADVANCED',',YAASHS_SQL_PLAN_HASH_VALUE,YAASHS_TIME_MODEL,YAASHS_IN_CONNECTION_MGMT,YAASHS_IN_PARSE,YAASHS_IN_HARD_PARSE,YAASHS_IN_SQL_EXECUTION,YAASHS_IN_PLSQL_EXECUTION,YAASHS_IN_PLSQL_RPC,YAASHS_IN_PLSQL_COMPILATION,YAASHS_IN_JAVA_EXECUTION,YAASHS_IN_BIND,YAASHS_IN_CURSOR_CLOSE,YAASHS_IN_SEQUENCE_LOAD,YAASHS_IN_INMEMORY_QUERY,YAASHS_IN_INMEMORY_POPULATE,YAASHS_IN_INMEMORY_PREPOPULATE,YAASHS_IN_INMEMORY_REPOPULATE,YAASHS_IN_INMEMORY_TREPOPULATE,YAASHS_IN_TABLESPACE_ENCRYPTION',',SQL_PLAN_HASH_VALUE,TIME_MODEL,IN_CONNECTION_MGMT,IN_PARSE,IN_HARD_PARSE,IN_SQL_EXECUTION,IN_PLSQL_EXECUTION,IN_PLSQL_RPC,IN_PLSQL_COMPILATION,IN_JAVA_EXECUTION,IN_BIND,IN_CURSOR_CLOSE,IN_SEQUENCE_LOAD,IN_INMEMORY_QUERY,IN_INMEMORY_POPULATE,IN_INMEMORY_PREPOPULATE,IN_INMEMORY_REPOPULATE,IN_INMEMORY_TREPOPULATE,IN_TABLESPACE_ENCRYPTION');
INSERT INTO yaashsr.col_mapping (version,type,col_sess,col_ashs) VALUES ('18.0','STANDARD','SID,SERIAL#,USER#,TYPE,SQL_ID,SQL_CHILD_NUMBER,SQL_EXEC_ID,SQL_EXEC_START,COMMAND,decode(STATE,''WAITING'',EVENT,NULL),decode(STATE,''WAITING'',EVENT#,NULL),decode(STATE,''WAITING'',P1TEXT,NULL),decode(STATE,''WAITING'',P1,NULL),decode(STATE,''WAITING'',P2TEXT,NULL),decode(STATE,''WAITING'',P2,NULL),decode(STATE,''WAITING'',P3TEXT,NULL),decode(STATE,''WAITING'',P3,NULL),decode(STATE,''WAITING'',WAIT_CLASS,NULL),decode(STATE,''WAITING'',WAIT_CLASS_ID,NULL),decode(STATE,''WAITING'',''WAITING'',''ON CPU''),MODULE,PROGRAM,ACTION,CLIENT_IDENTIFIER,MACHINE,PORT,BLOCKING_SESSION_STATUS,BLOCKING_INSTANCE,BLOCKING_SESSION,ROW_WAIT_OBJ#,ROW_WAIT_FILE#,ROW_WAIT_BLOCK#,ROW_WAIT_ROW#,TOP_LEVEL_CALL#,COMMAND,PLSQL_ENTRY_OBJECT_ID,PLSQL_ENTRY_SUBPROGRAM_ID,PLSQL_OBJECT_ID,PLSQL_SUBPROGRAM_ID,SEQ#,WAIT_TIME,ECID,CON_ID','SESSION_ID,SESSION_SERIAL#,USER_ID,SESSION_TYPE,SQL_ID,SQL_CHILD_NUMBER,SQL_EXEC_ID,SQL_EXEC_START,SQL_OPCODE,EVENT,EVENT#,P1TEXT,P1,P2TEXT,P2,P3TEXT,P3,WAIT_CLASS,WAIT_CLASS_ID,SESSION_STATE,MODULE,PROGRAM,ACTION,CLIENT_ID,MACHINE,PORT,BLOCKING_SESSION_STATUS,BLOCKING_INST_ID,BLOCKING_SESSION,CURRENT_OBJ#,CURRENT_FILE#,CURRENT_BLOCK#,CURRENT_ROW#,TOP_LEVEL_CALL#,SQL_OPNAME,PLSQL_ENTRY_OBJECT_ID,PLSQL_ENTRY_SUBPROGRAM_ID,PLSQL_OBJECT_ID,PLSQL_SUBPROGRAM_ID,SEQ#,WAIT_TIME,ECID,CON_ID');
INSERT INTO yaashsr.col_mapping (version,type,col_sess,col_ashs) VALUES ('19.0','ADVANCED',',YAASHS_SQL_PLAN_HASH_VALUE,YAASHS_TIME_MODEL,YAASHS_IN_CONNECTION_MGMT,YAASHS_IN_PARSE,YAASHS_IN_HARD_PARSE,YAASHS_IN_SQL_EXECUTION,YAASHS_IN_PLSQL_EXECUTION,YAASHS_IN_PLSQL_RPC,YAASHS_IN_PLSQL_COMPILATION,YAASHS_IN_JAVA_EXECUTION,YAASHS_IN_BIND,YAASHS_IN_CURSOR_CLOSE,YAASHS_IN_SEQUENCE_LOAD,YAASHS_IN_INMEMORY_QUERY,YAASHS_IN_INMEMORY_POPULATE,YAASHS_IN_INMEMORY_PREPOPULATE,YAASHS_IN_INMEMORY_REPOPULATE,YAASHS_IN_INMEMORY_TREPOPULATE,YAASHS_IN_TABLESPACE_ENCRYPTION',',SQL_PLAN_HASH_VALUE,TIME_MODEL,IN_CONNECTION_MGMT,IN_PARSE,IN_HARD_PARSE,IN_SQL_EXECUTION,IN_PLSQL_EXECUTION,IN_PLSQL_RPC,IN_PLSQL_COMPILATION,IN_JAVA_EXECUTION,IN_BIND,IN_CURSOR_CLOSE,IN_SEQUENCE_LOAD,IN_INMEMORY_QUERY,IN_INMEMORY_POPULATE,IN_INMEMORY_PREPOPULATE,IN_INMEMORY_REPOPULATE,IN_INMEMORY_TREPOPULATE,IN_TABLESPACE_ENCRYPTION');
INSERT INTO yaashsr.col_mapping (version,type,col_sess,col_ashs) VALUES ('19.0','STANDARD','SID,SERIAL#,USER#,TYPE,SQL_ID,SQL_CHILD_NUMBER,SQL_EXEC_ID,SQL_EXEC_START,COMMAND,decode(STATE,''WAITING'',EVENT,NULL),decode(STATE,''WAITING'',EVENT#,NULL),decode(STATE,''WAITING'',P1TEXT,NULL),decode(STATE,''WAITING'',P1,NULL),decode(STATE,''WAITING'',P2TEXT,NULL),decode(STATE,''WAITING'',P2,NULL),decode(STATE,''WAITING'',P3TEXT,NULL),decode(STATE,''WAITING'',P3,NULL),decode(STATE,''WAITING'',WAIT_CLASS,NULL),decode(STATE,''WAITING'',WAIT_CLASS_ID,NULL),decode(STATE,''WAITING'',''WAITING'',''ON CPU''),MODULE,PROGRAM,ACTION,CLIENT_IDENTIFIER,MACHINE,PORT,BLOCKING_SESSION_STATUS,BLOCKING_INSTANCE,BLOCKING_SESSION,ROW_WAIT_OBJ#,ROW_WAIT_FILE#,ROW_WAIT_BLOCK#,ROW_WAIT_ROW#,TOP_LEVEL_CALL#,COMMAND,PLSQL_ENTRY_OBJECT_ID,PLSQL_ENTRY_SUBPROGRAM_ID,PLSQL_OBJECT_ID,PLSQL_SUBPROGRAM_ID,SEQ#,WAIT_TIME,ECID,CON_ID','SESSION_ID,SESSION_SERIAL#,USER_ID,SESSION_TYPE,SQL_ID,SQL_CHILD_NUMBER,SQL_EXEC_ID,SQL_EXEC_START,SQL_OPCODE,EVENT,EVENT#,P1TEXT,P1,P2TEXT,P2,P3TEXT,P3,WAIT_CLASS,WAIT_CLASS_ID,SESSION_STATE,MODULE,PROGRAM,ACTION,CLIENT_ID,MACHINE,PORT,BLOCKING_SESSION_STATUS,BLOCKING_INST_ID,BLOCKING_SESSION,CURRENT_OBJ#,CURRENT_FILE#,CURRENT_BLOCK#,CURRENT_ROW#,TOP_LEVEL_CALL#,SQL_OPNAME,PLSQL_ENTRY_OBJECT_ID,PLSQL_ENTRY_SUBPROGRAM_ID,PLSQL_OBJECT_ID,PLSQL_SUBPROGRAM_ID,SEQ#,WAIT_TIME,ECID,CON_ID');
COMMIT;

DECLARE
    l_view_definition_112 yaashsr.advanced_view_def.view_definition%TYPE;
    l_view_definition_121 yaashsr.advanced_view_def.view_definition%TYPE;
    l_view_definition_122 yaashsr.advanced_view_def.view_definition%TYPE;
    l_view_definition_180 yaashsr.advanced_view_def.view_definition%TYPE;
    l_view_definition_190 yaashsr.advanced_view_def.view_definition%TYPE;
BEGIN
    -- V$SESSION structure from Oracle version 11.2.0.3 plus additional columns YAASHS_* 
    l_view_definition_112 := 
    q'[    SELECT
        s.addr as SADDR,
        s.indx as SID,
        s.ksuseser as SERIAL#,
        s.ksuudses as AUDSID,
        s.ksusepro as PADDR,
        s.ksuudlui as USER#,
        s.ksuudlna as USERNAME,
        s.ksuudoct as COMMAND,
        s.ksusesow as OWNERID,
        decode(s.ksusetrn, hextoraw('00'), NULL, s.ksusetrn) as TADDR,
        decode(s.ksqpswat, hextoraw('00'), NULL, s.ksqpswat) as LOCKWAIT,
        decode(bitand(s.ksuseidl, 11), 1, 'ACTIVE', 0, decode(bitand(s.ksuseflg, 4096),  0, 'INACTIVE', 'CACHED'), 2, 'SNIPED', 3, 'SNIPED', 'KILLED') as STATUS,
        decode(s.ksspatyp, 1, 'DEDICATED', 2, 'SHARED', 3, 'PSEUDO', 4, 'POOLED', 'NONE') as SERVER,
        s.ksuudsid as SCHEMA#,
        s.ksuudsna as SCHEMANAME,
        s.ksuseunm as OSUSER,
        s.ksusepid as PROCESS,
        s.ksusemnm as MACHINE,
        s.ksusemnp as PORT,
        s.ksusetid as TERMINAL,
        s.ksusepnm as PROGRAM,
        decode(bitand(s.ksuseflg, 19), 17, 'BACKGROUND', 1, 'USER', 2, 'RECURSIVE', '?') as TYPE,
        s.ksusesql as SQL_ADDRESS,
        s.ksusesqh as SQL_HASH_VALUE,
        s.ksusesqi as SQL_ID,
        decode(s.ksusesch, 65535, TO_NUMBER(NULL), s.ksusesch) as SQL_CHILD_NUMBER,
        s.ksusesesta as SQL_EXEC_START,
        decode(s.ksuseseid, 0, TO_NUMBER(NULL), s.ksuseseid) as SQL_EXEC_ID,
        s.ksusepsq as PREV_SQL_ADDR,
        s.ksusepha as PREV_HASH_VALUE,
        s.ksusepsi as PREV_SQL_ID,
        decode(s.ksusepch, 65535, TO_NUMBER(NULL), s.ksusepch) as PREV_CHILD_NUMBER,
        s.ksusepesta as PREV_EXEC_START,
        decode(s.ksusepeid, 0, TO_NUMBER(NULL), s.ksusepeid) as PREV_EXEC_ID,
        decode(s.ksusepeo, 0, TO_NUMBER(NULL), s.ksusepeo) as PLSQL_ENTRY_OBJECT_ID,
        decode(s.ksusepeo, 0, TO_NUMBER(NULL), s.ksusepes) as PLSQL_ENTRY_SUBPROGRAM_ID,
        decode(s.ksusepco, 0, TO_NUMBER(NULL), decode(bitand(s.ksusstmbv,power(2, 11)),power(2, 11), s.ksusepco, TO_NUMBER(NULL))) as PLSQL_OBJECT_ID,
        decode(s.ksusepcs, 0, TO_NUMBER(NULL), decode(bitand(s.ksusstmbv,power(2, 11)),power(2, 11), s.ksusepcs, TO_NUMBER(NULL))) as PLSQL_SUBPROGRAM_ID,
        s.ksuseapp as MODULE,
        s.ksuseaph as MODULE_HASH,
        s.ksuseact as ACTION,
        s.ksuseach as ACTION_HASH,
        s.ksusecli as CLIENT_INFO,
        s.ksusefix as FIXED_TABLE_SEQUENCE,
        s.ksuseobj as ROW_WAIT_OBJ#,
        s.ksusefil as ROW_WAIT_FILE#,
        s.ksuseblk as ROW_WAIT_BLOCK#,
        s.ksuseslt as ROW_WAIT_ROW#,
        s.ksuseorafn as TOP_LEVEL_CALL#,
        s.ksuseltm as LOGON_TIME,
        s.ksusectm as LAST_CALL_ET,
        decode(bitand(s.ksusepxopt, 12), 0, 'NO', 'YES') as PDML_ENABLED,
        decode(s.ksuseft, 2, 'SESSION', 4,'SELECT', 8, 'TRANSACTIONAL', 'NONE') as FAILOVER_TYPE,
        decode(s.ksusefm, 1, 'BASIC', 2, 'PRECONNECT', 4, 'PREPARSE', 'NONE') as FAILOVER_METHOD,
        decode(s.ksusefs, 1, 'YES', 'NO') as FAILED_OVER,
        s.ksusegrp as RESOURCE_CONSUMER_GROUP,
        decode(bitand(s.ksusepxopt, 4), 4, 'ENABLED', decode(bitand(s.ksusepxopt, 8),8, 'FORCED', 'DISABLED')) as PDML_STATUS,
        decode(bitand(s.ksusepxopt, 2), 2, 'FORCED', decode(bitand(s.ksusepxopt, 1),1, 'DISABLED', 'ENABLED')) as PDDL_STATUS,
        decode(bitand(s.ksusepxopt, 32), 32, 'FORCED', decode(bitand(s.ksusepxopt, 16),16, 'DISABLED', 'ENABLED')) as PQ_STATUS,
        s.ksusecqd as CURRENT_QUEUE_DURATION,
        s.ksuseclid as CLIENT_IDENTIFIER,
        decode(s.ksuseblocker, 4294967295, 'UNKNOWN', 4294967294, 'UNKNOWN', 4294967293, 'UNKNOWN', 4294967292, 'NO HOLDER', 4294967291, 'NOT IN WAIT', 'VALID') as BLOCKING_SESSION_STATUS,
        decode(s.ksuseblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksuseblocker, 2147418112) / 65536) as BLOCKING_INSTANCE,
        decode(s.ksuseblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksuseblocker, 65535)) as BLOCKING_SESSION,
        decode(s.ksusefblocker, 4294967295, 'UNKNOWN', 4294967294, 'UNKNOWN', 4294967293, 'UNKNOWN', 4294967292, 'NO HOLDER', 4294967291, 'NOT IN WAIT', 'VALID') as FINAL_BLOCKING_SESSION_STATUS,
        decode(s.ksusefblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksusefblocker, 2147418112) / 65536) as FINAL_BLOCKING_INSTANCE,
        decode(s.ksusefblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksusefblocker, 65535)) as FINAL_BLOCKING_SESSION,
        w.kslwtseq as SEQ#,
        w.kslwtevt as EVENT#,
        e.kslednam as EVENT,
        e.ksledp1 as P1TEXT,
        w.kslwtp1 as P1,
        w.kslwtp1r as P1RAW,
        e.ksledp2 as P2TEXT,
        w.kslwtp2 as P2,
        w.kslwtp2r as P2RAW,
        e.ksledp3 as P3TEXT,
        w.kslwtp3 as P3,
        w.kslwtp3r as P3RAW,
        e.ksledclassid as WAIT_CLASS_ID,
        e.ksledclass# as WAIT_CLASS#,
        e.ksledclass as WAIT_CLASS,
        decode(w.kslwtinwait, 0, decode(bitand(w.kslwtflags, 256), 0, - 2, decode(round(w.kslwtstime / 10000), 0,- 1, round(w.kslwtstime / 10000))), 0) as WAIT_TIME,
        decode(w.kslwtinwait, 0, round((w.kslwtstime + w.kslwtltime) / 1000000), round(w.kslwtstime / 1000000)) as SECONDS_IN_WAIT, 
        decode(w.kslwtinwait, 1, 'WAITING', decode(bitand(w.kslwtflags, 256), 0, 'WAITED UNKNOWN TIME', decode(round(w.kslwtstime / 10000), 0, 'WAITED SHORT TIME', 'WAITED KNOWN TIME'))) as STATE,
        w.kslwtstime as WAIT_TIME_MICRO,
        decode(w.kslwtinwait, 0, TO_NUMBER(NULL), decode(bitand(w.kslwtflags, 64), 64, 0, w.kslwttrem)) as TIME_REMAINING_MICRO,
        w.kslwtltime as TIME_SINCE_LAST_WAIT_MICRO,
        s.ksusesvc as SERVICE_NAME,
        decode(bitand(s.ksuseflg2, 32), 32, 'ENABLED', 'DISABLED') as SQL_TRACE,
        decode(bitand(s.ksuseflg2, 64), 64, 'TRUE', 'FALSE') as SQL_TRACE_WAITS,
        decode(bitand(s.ksuseflg2, 128), 128, 'TRUE', 'FALSE') as SQL_TRACE_BINDS,
        decode(bitand(s.ksuseflg2, 65536) + bitand(s.ksuseflg2, 131072), 65536, 'ALL EXEC', 131072, 'NEVER', 0, 'FIRST EXEC') as SQL_TRACE_PLAN_STATS,
        s.ksuudsae as SESSION_EDITION_ID,
        s.ksusecre as CREATOR_ADDR,
        s.ksusecsn as CREATOR_SERIAL#,
        s.ksuseecid as ECID,
        -- Following column definitions are extracted from Tanel Poder's tpt-oracle Github repository
        s.ksusesph as YAASHS_SQL_PLAN_HASH_VALUE,
        s.ksusstmbv as YAASHS_TIME_MODEL,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 03)) = POWER(2, 03) THEN 'Y' ELSE 'N' END as YAASHS_IN_CONNECTION_MGMT,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 04)) = POWER(2, 04) THEN 'Y' ELSE 'N' END as YAASHS_IN_PARSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 07)) = POWER(2, 07) THEN 'Y' ELSE 'N' END as YAASHS_IN_HARD_PARSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 10)) = POWER(2, 10) THEN 'Y' ELSE 'N' END as YAASHS_IN_SQL_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 11)) = POWER(2, 11) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 12)) = POWER(2, 12) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_RPC,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 13)) = POWER(2, 13) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_COMPILATION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 14)) = POWER(2, 14) THEN 'Y' ELSE 'N' END as YAASHS_IN_JAVA_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 15)) = POWER(2, 15) THEN 'Y' ELSE 'N' END as YAASHS_IN_BIND,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 16)) = POWER(2, 16) THEN 'Y' ELSE 'N' END as YAASHS_IN_CURSOR_CLOSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 17)) = POWER(2, 17) THEN 'Y' ELSE 'N' END as YAASHS_IN_SEQUENCE_LOAD,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 18)) = POWER(2, 18) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_QUERY,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 19)) = POWER(2, 19) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_POPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 20)) = POWER(2, 20) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_PREPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 21)) = POWER(2, 21) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_REPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 22)) = POWER(2, 22) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_TREPOPULATE,
        -- Shortened identifier name due to 30 characters limit in 11.2
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 23)) = POWER(2, 23) THEN 'Y' ELSE 'N' END as YAASHS_IN_TBS_ENCRYPTION
    FROM
        x$ksuse s,
        x$ksled e,
        x$kslwt w
    WHERE
            bitand(s.ksspaflg, 1) != 0
        AND bitand(s.ksuseflg, 1) != 0
        AND s.indx = w.kslwtsid
        AND w.kslwtevt = e.indx
        AND s.inst_id = USERENV('Instance')]';

    -- V$SESSION structure from Oracle version 12.1.0.1 plus additional columns YAASHS_* 
    l_view_definition_121 := 
    q'[    SELECT
        s.addr as SADDR,
        s.indx as SID,
        s.ksuseser as SERIAL#,
        s.ksuudses as AUDSID,
        s.ksusepro as PADDR,
        s.ksuudlui as USER#,
        s.ksuudlna as USERNAME,
        s.ksuudoct as COMMAND,
        s.ksusesow as OWNERID,
        decode(s.ksusetrn, hextoraw('00'), NULL, s.ksusetrn) as TADDR,
        decode(s.ksqpswat, hextoraw('00'), NULL, s.ksqpswat) as LOCKWAIT,
        decode(bitand(s.ksuseidl, 11), 1, 'ACTIVE', 0, decode(bitand(s.ksuseflg, 4096), 0, 'INACTIVE', 'CACHED'), 2, 'SNIPED', 3, 'SNIPED', 'KILLED') as STATUS,
        decode(s.ksspatyp, 1, 'DEDICATED', 2, 'SHARED', 3, 'PSEUDO', 4, 'POOLED', 'NONE') as SERVER,
        s.ksuudsid as SCHEMA#,
        s.ksuudsna as SCHEMANAME,
        s.ksuseunm as OSUSER,
        s.ksusepid as PROCESS,
        s.ksusemnm as MACHINE,
        s.ksusemnp as PORT,
        s.ksusetid as TERMINAL,
        s.ksusepnm as PROGRAM,
        decode(bitand(s.ksuseflg, 19), 17, 'BACKGROUND', 1, 'USER', 2, 'RECURSIVE', '?') as TYPE,
        s.ksusesql as SQL_ADDRESS,
        s.ksusesqh as SQL_HASH_VALUE,
        s.ksusesqi as SQL_ID,
        decode(s.ksusesch, 65535, TO_NUMBER(NULL), s.ksusesch) as SQL_CHILD_NUMBER,
        s.ksusesesta as SQL_EXEC_START,
        decode(s.ksuseseid, 0, TO_NUMBER(NULL), s.ksuseseid) as SQL_EXEC_ID,
        s.ksusepsq as PREV_SQL_ADDR,
        s.ksusepha as PREV_HASH_VALUE,
        s.ksusepsi as PREV_SQL_ID,
        decode(s.ksusepch, 65535, TO_NUMBER(NULL), s.ksusepch) as PREV_CHILD_NUMBER,
        s.ksusepesta as PREV_EXEC_START,
        decode(s.ksusepeid, 0, TO_NUMBER(NULL), s.ksusepeid) as PREV_EXEC_ID,
        decode(s.ksusepeo, 0, TO_NUMBER(NULL), s.ksusepeo) as PLSQL_ENTRY_OBJECT_ID,
        decode(s.ksusepeo, 0, TO_NUMBER(NULL), s.ksusepes) as PLSQL_ENTRY_SUBPROGRAM_ID,
        decode(s.ksusepco, 0, TO_NUMBER(NULL), decode(bitand(s.ksusstmbv,power(2, 11)),power(2, 11), s.ksusepco, TO_NUMBER(NULL))) as PLSQL_OBJECT_ID,
        decode(s.ksusepcs, 0, TO_NUMBER(NULL), decode(bitand(s.ksusstmbv,power(2, 11)),power(2, 11), s.ksusepcs, TO_NUMBER(NULL))) as PLSQL_SUBPROGRAM_ID,
        s.ksuseapp as MODULE,
        s.ksuseaph as MODULE_HASH,
        s.ksuseact as ACTION,
        s.ksuseach as ACTION_HASH,
        s.ksusecli as CLIENT_INFO,
        s.ksusefix as FIXED_TABLE_SEQUENCE,
        s.ksuseobj as ROW_WAIT_OBJ#,
        s.ksusefil as ROW_WAIT_FILE#,
        s.ksuseblk as ROW_WAIT_BLOCK#,
        s.ksuseslt as ROW_WAIT_ROW#,
        s.ksuseorafn as TOP_LEVEL_CALL#,
        s.ksuseltm as LOGON_TIME,
        s.ksusectm as LAST_CALL_ET,
        decode(bitand(s.ksusepxopt, 12), 0, 'NO', 'YES') as PDML_ENABLED,
        decode(s.ksuseft, 2, 'SESSION', 4,'SELECT', 8, 'TRANSACTIONAL', 'NONE') as FAILOVER_TYPE,
        decode(s.ksusefm, 1, 'BASIC', 2, 'PRECONNECT', 4, 'PREPARSE', 'NONE') as FAILOVER_METHOD,
        decode(s.ksusefs, 1, 'YES', 'NO') as FAILED_OVER,
        s.ksusegrp as RESOURCE_CONSUMER_GROUP,
        decode(bitand(s.ksusepxopt, 4), 4, 'ENABLED', decode(bitand(s.ksusepxopt, 8),8, 'FORCED', 'DISABLED')) as PDML_STATUS,
        decode(bitand(s.ksusepxopt, 2), 2, 'FORCED', decode(bitand(s.ksusepxopt, 1),1, 'DISABLED', 'ENABLED')) as PDDL_STATUS,
        decode(bitand(s.ksusepxopt, 32), 32, 'FORCED', decode(bitand(s.ksusepxopt, 16),16, 'DISABLED', 'ENABLED')) as PQ_STATUS,
        s.ksusecqd as CURRENT_QUEUE_DURATION,
        s.ksuseclid as CLIENT_IDENTIFIER,
        decode(s.ksuseblocker, 4294967295, 'UNKNOWN', 4294967294, 'UNKNOWN', 4294967293, 'UNKNOWN', 4294967292, 'NO HOLDER', 4294967291, 'NOT IN WAIT', 'VALID') as BLOCKING_SESSION_STATUS,
        decode(s.ksuseblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksuseblocker, 2147418112) / 65536) as BLOCKING_INSTANCE,
        decode(s.ksuseblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksuseblocker, 65535)) as BLOCKING_SESSION,
        decode(s.ksusefblocker, 4294967295, 'UNKNOWN', 4294967294, 'UNKNOWN', 4294967293, 'UNKNOWN', 4294967292, 'NO HOLDER', 4294967291, 'NOT IN WAIT', 'VALID') as FINAL_BLOCKING_SESSION_STATUS,
        decode(s.ksusefblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksusefblocker, 2147418112) / 65536) as FINAL_BLOCKING_INSTANCE,
        decode(s.ksusefblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksusefblocker, 65535)) as FINAL_BLOCKING_SESSION,
        w.kslwtseq as SEQ#,
        w.kslwtevt as EVENT#,
        e.kslednam as EVENT,
        e.ksledp1 as P1TEXT,
        w.kslwtp1 as P1,
        w.kslwtp1r as P1RAW,
        e.ksledp2 as P2TEXT,
        w.kslwtp2 as P2,
        w.kslwtp2r as P2RAW,
        e.ksledp3 as P3TEXT,
        w.kslwtp3 as P3,
        w.kslwtp3r as P3RAW,
        e.ksledclassid as WAIT_CLASS_ID,
        e.ksledclass# as WAIT_CLASS#,
        e.ksledclass as WAIT_CLASS,
        decode(w.kslwtinwait, 0, decode(bitand(w.kslwtflags, 256), 0, - 2, decode(round(w.kslwtstime / 10000), 0,- 1, round(w.kslwtstime / 10000))), 0) as WAIT_TIME,
        decode(w.kslwtinwait, 0, round((w.kslwtstime + w.kslwtltime) / 1000000), round(w.kslwtstime / 1000000)) as SECONDS_IN_WAIT, 
        decode(w.kslwtinwait, 1, 'WAITING', decode(bitand(w.kslwtflags, 256), 0, 'WAITED UNKNOWN TIME', decode(round(w.kslwtstime / 10000), 0, 'WAITED SHORT TIME', 'WAITED KNOWN TIME'))) as STATE,
        w.kslwtstime as WAIT_TIME_MICRO,
        decode(w.kslwtinwait, 0, TO_NUMBER(NULL), decode(bitand(w.kslwtflags, 64), 64, 0, w.kslwttrem)) as TIME_REMAINING_MICRO,
        w.kslwtltime as TIME_SINCE_LAST_WAIT_MICRO,
        s.ksusesvc as SERVICE_NAME,
        decode(bitand(s.ksuseflg2, 32), 32, 'ENABLED', 'DISABLED') as SQL_TRACE,
        decode(bitand(s.ksuseflg2, 64), 64, 'TRUE', 'FALSE') as SQL_TRACE_WAITS,
        decode(bitand(s.ksuseflg2, 128), 128, 'TRUE', 'FALSE') as SQL_TRACE_BINDS,
        decode(bitand(s.ksuseflg2, 65536) + bitand(s.ksuseflg2, 131072), 65536, 'ALL EXEC', 131072, 'NEVER', 0, 'FIRST EXEC') as SQL_TRACE_PLAN_STATS,
        s.ksuudsae as SESSION_EDITION_ID,
        s.ksusecre as CREATOR_ADDR,
        s.ksusecsn as CREATOR_SERIAL#,
        s.ksuseecid as ECID,
        s.ksuudtxlp as SQL_TRANSLATION_PROFILE_ID,
        ( s.ksusepgaman + s.ksusepgaauto ) * 1024 as PGA_TUNABLE_MEM,
        s.con_id as CON_ID,
        s.ksusexnm as EXTERNAL_NAME,
        -- Following column definitions are extracted from Tanel Poder's tpt-oracle Github repository
        s.ksusesph as YAASHS_SQL_PLAN_HASH_VALUE,
        s.ksusstmbv as YAASHS_TIME_MODEL,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 03)) = POWER(2, 03) THEN 'Y' ELSE 'N' END as YAASHS_IN_CONNECTION_MGMT,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 04)) = POWER(2, 04) THEN 'Y' ELSE 'N' END as YAASHS_IN_PARSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 07)) = POWER(2, 07) THEN 'Y' ELSE 'N' END as YAASHS_IN_HARD_PARSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 10)) = POWER(2, 10) THEN 'Y' ELSE 'N' END as YAASHS_IN_SQL_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 11)) = POWER(2, 11) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 12)) = POWER(2, 12) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_RPC,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 13)) = POWER(2, 13) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_COMPILATION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 14)) = POWER(2, 14) THEN 'Y' ELSE 'N' END as YAASHS_IN_JAVA_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 15)) = POWER(2, 15) THEN 'Y' ELSE 'N' END as YAASHS_IN_BIND,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 16)) = POWER(2, 16) THEN 'Y' ELSE 'N' END as YAASHS_IN_CURSOR_CLOSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 17)) = POWER(2, 17) THEN 'Y' ELSE 'N' END as YAASHS_IN_SEQUENCE_LOAD,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 18)) = POWER(2, 18) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_QUERY,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 19)) = POWER(2, 19) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_POPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 20)) = POWER(2, 20) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_PREPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 21)) = POWER(2, 21) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_REPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 22)) = POWER(2, 22) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_TREPOPULATE,
        -- Shortened identifier name due to 30 characters limit in 12.1
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 23)) = POWER(2, 23) THEN 'Y' ELSE 'N' END as YAASHS_IN_TBS_ENCRYPTION
    FROM
        x$ksuse s,
        x$ksled e,
        x$kslwt w
    WHERE
            bitand(s.ksspaflg, 1) != 0
        AND bitand(s.ksuseflg, 1) != 0
        AND s.indx = w.kslwtsid
        AND w.kslwtevt = e.indx
        AND s.inst_id = USERENV('Instance')]';

    -- V$SESSION structure from Oracle version 12.2.0.1 plus additional columns YAASHS_* 
    l_view_definition_122 := 
    q'[    SELECT
        s.addr as SADDR,
        s.indx as SID,
        s.ksuseser as SERIAL#,
        s.ksuudses as AUDSID,
        s.ksusepro as PADDR,
        s.ksuudlui as USER#,
        s.ksuudlna as USERNAME,
        s.ksuudoct as COMMAND,
        s.ksusesow as OWNERID,
        decode(s.ksusetrn, hextoraw('00'), NULL, s.ksusetrn) as TADDR,
        decode(s.ksqpswat, hextoraw('00'), NULL, s.ksqpswat) as LOCKWAIT,
        decode(bitand(s.ksuseidl, 9), 1, 'ACTIVE', 0, decode(bitand(s.ksuseflg, 4096), 0, 'INACTIVE', 'CACHED'), 'KILLED') as STATUS,
        decode(s.ksspatyp, 1, 'DEDICATED', 2, 'SHARED', 3, 'PSEUDO', 4, 'POOLED', 'NONE') as SERVER,
        s.ksuudsid as SCHEMA#,
        s.ksuudsna as SCHEMANAME,
        s.ksuseunm as OSUSER,
        s.ksusepid as PROCESS,
        s.ksusemnm as MACHINE,
        s.ksusemnp as PORT,
        s.ksusetid as TERMINAL,
        s.ksusepnm as PROGRAM,
        decode(bitand(s.ksuseflg, 19), 17, 'BACKGROUND', 1, 'USER', 2, 'RECURSIVE', '?') as TYPE,
        s.ksusesql as SQL_ADDRESS,
        s.ksusesqh as SQL_HASH_VALUE,
        s.ksusesqi as SQL_ID,
        decode(s.ksusesch, 65535, TO_NUMBER(NULL), s.ksusesch) as SQL_CHILD_NUMBER,
        s.ksusesesta as SQL_EXEC_START,
        decode(s.ksuseseid, 0, TO_NUMBER(NULL), s.ksuseseid) as SQL_EXEC_ID,
        s.ksusepsq as PREV_SQL_ADDR,
        s.ksusepha as PREV_HASH_VALUE,
        s.ksusepsi as PREV_SQL_ID,
        decode(s.ksusepch, 65535, TO_NUMBER(NULL), s.ksusepch) as PREV_CHILD_NUMBER,
        s.ksusepesta as PREV_EXEC_START,
        decode(s.ksusepeid, 0, TO_NUMBER(NULL), s.ksusepeid) as PREV_EXEC_ID,
        decode(s.ksusepeo, 0, TO_NUMBER(NULL), s.ksusepeo) as PLSQL_ENTRY_OBJECT_ID,
        decode(s.ksusepeo, 0, TO_NUMBER(NULL), s.ksusepes) as PLSQL_ENTRY_SUBPROGRAM_ID,
        decode(s.ksusepco, 0, TO_NUMBER(NULL), decode(bitand(s.ksusstmbv,power(2, 11)),power(2, 11), s.ksusepco, TO_NUMBER(NULL))) as PLSQL_OBJECT_ID,
        decode(s.ksusepcs, 0, TO_NUMBER(NULL), decode(bitand(s.ksusstmbv,power(2, 11)),power(2, 11), s.ksusepcs, TO_NUMBER(NULL))) as PLSQL_SUBPROGRAM_ID,
        s.ksuseapp as MODULE,
        s.ksuseaph as MODULE_HASH,
        s.ksuseact as ACTION,
        s.ksuseach as ACTION_HASH,
        s.ksusecli as CLIENT_INFO,
        s.ksusefix as FIXED_TABLE_SEQUENCE,
        s.ksuseobj as ROW_WAIT_OBJ#,
        s.ksusefil as ROW_WAIT_FILE#,
        s.ksuseblk as ROW_WAIT_BLOCK#,
        s.ksuseslt as ROW_WAIT_ROW#,
        s.ksuseorafn as TOP_LEVEL_CALL#,
        s.ksuseltm as LOGON_TIME,
        s.ksusectm as LAST_CALL_ET,
        decode(bitand(s.ksusepxopt, 12), 0, 'NO', 'YES') as PDML_ENABLED,
        decode(s.ksuseft, 2, 'SESSION', 4,'SELECT', 8, 'TRANSACTIONAL', 'NONE') as FAILOVER_TYPE,
        decode(s.ksusefm, 1, 'BASIC', 2, 'PRECONNECT', 4, 'PREPARSE', 'NONE') as FAILOVER_METHOD,
        decode(s.ksusefs, 1, 'YES', 'NO') as FAILED_OVER,
        s.ksusegrp as RESOURCE_CONSUMER_GROUP,
        decode(bitand(s.ksusepxopt, 4), 4, 'ENABLED', decode(bitand(s.ksusepxopt, 8),8, 'FORCED', 'DISABLED')) as PDML_STATUS,
        decode(bitand(s.ksusepxopt, 2), 2, 'FORCED', decode(bitand(s.ksusepxopt, 1),1, 'DISABLED', 'ENABLED')) as PDDL_STATUS,
        decode(bitand(s.ksusepxopt, 32), 32, 'FORCED', decode(bitand(s.ksusepxopt, 16),16, 'DISABLED', 'ENABLED')) as PQ_STATUS,
        s.ksusecqd as CURRENT_QUEUE_DURATION,
        s.ksuseclid as CLIENT_IDENTIFIER,
        decode(s.ksuseblocker, 4294967295, 'UNKNOWN', 4294967294, 'UNKNOWN', 4294967293, 'UNKNOWN', 4294967292, 'NO HOLDER', 4294967291, 'NOT IN WAIT', 'VALID') as BLOCKING_SESSION_STATUS,
        decode(s.ksuseblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksuseblocker, 2147418112) / 65536) as BLOCKING_INSTANCE,
        decode(s.ksuseblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksuseblocker, 65535)) as BLOCKING_SESSION,
        decode(s.ksusefblocker, 4294967295, 'UNKNOWN', 4294967294, 'UNKNOWN', 4294967293, 'UNKNOWN', 4294967292, 'NO HOLDER', 4294967291, 'NOT IN WAIT', 'VALID') as FINAL_BLOCKING_SESSION_STATUS,
        decode(s.ksusefblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksusefblocker, 2147418112) / 65536) as FINAL_BLOCKING_INSTANCE,
        decode(s.ksusefblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksusefblocker, 65535)) as FINAL_BLOCKING_SESSION,
        w.kslwtseq as SEQ#,
        w.kslwtevt as EVENT#,
        e.kslednam as EVENT,
        e.ksledp1 as P1TEXT,
        w.kslwtp1 as P1,
        w.kslwtp1r as P1RAW,
        e.ksledp2 as P2TEXT,
        w.kslwtp2 as P2,
        w.kslwtp2r as P2RAW,
        e.ksledp3 as P3TEXT,
        w.kslwtp3 as P3,
        w.kslwtp3r as P3RAW,
        e.ksledclassid as WAIT_CLASS_ID,
        e.ksledclass# as WAIT_CLASS#,
        e.ksledclass as WAIT_CLASS,
        decode(w.kslwtinwait, 0, decode(bitand(w.kslwtflags, 256), 0, - 2, decode(round(w.kslwtstime / 10000), 0,- 1, round(w.kslwtstime / 10000))), 0) as WAIT_TIME,
        decode(w.kslwtinwait, 0, round((w.kslwtstime + w.kslwtltime) / 1000000), round(w.kslwtstime / 1000000)) as SECONDS_IN_WAIT, 
        decode(w.kslwtinwait, 1, 'WAITING', decode(bitand(w.kslwtflags, 256), 0, 'WAITED UNKNOWN TIME', decode(round(w.kslwtstime / 10000), 0, 'WAITED SHORT TIME', 'WAITED KNOWN TIME'))) as STATE,
        w.kslwtstime as WAIT_TIME_MICRO,
        decode(w.kslwtinwait, 0, TO_NUMBER(NULL), decode(bitand(w.kslwtflags, 64), 64, 0, w.kslwttrem)) as TIME_REMAINING_MICRO,
        w.kslwtltime as TIME_SINCE_LAST_WAIT_MICRO,
        s.ksusesvc as SERVICE_NAME,
        decode(bitand(s.ksuseflg2, 32), 32, 'ENABLED', 'DISABLED') as SQL_TRACE,
        decode(bitand(s.ksuseflg2, 64), 64, 'TRUE', 'FALSE') as SQL_TRACE_WAITS,
        decode(bitand(s.ksuseflg2, 128), 128, 'TRUE', 'FALSE') as SQL_TRACE_BINDS,
        decode(bitand(s.ksuseflg2, 65536) + bitand(s.ksuseflg2, 131072), 65536, 'ALL EXEC', 131072, 'NEVER', 0, 'FIRST EXEC') as SQL_TRACE_PLAN_STATS,
        s.ksuudsae as SESSION_EDITION_ID,
        s.ksusecre as CREATOR_ADDR,
        s.ksusecsn as CREATOR_SERIAL#,
        s.ksuseecid as ECID,
        s.ksuudtxlp as SQL_TRANSLATION_PROFILE_ID,
        ( s.ksusepgaman + s.ksusepgaauto ) * 1024 as PGA_TUNABLE_MEM,
        decode(bitand(s.ksuudflg, 512), 512, 'ENABLED', 'DISABLED') as SHARD_DDL_STATUS,
        s.con_id as CON_ID,
        s.ksusexnm as EXTERNAL_NAME,
        decode(bitand(s.ksuseflg3, 2048), 2048, 'TRUE', 'FALSE') as PLSQL_DEBUGGER_CONNECTED,
        -- Following column definitions are extracted from Tanel Poder's tpt-oracle Github repository
        s.ksusesph as YAASHS_SQL_PLAN_HASH_VALUE,
        s.ksusstmbv as YAASHS_TIME_MODEL,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 03)) = POWER(2, 03) THEN 'Y' ELSE 'N' END as YAASHS_IN_CONNECTION_MGMT,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 04)) = POWER(2, 04) THEN 'Y' ELSE 'N' END as YAASHS_IN_PARSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 07)) = POWER(2, 07) THEN 'Y' ELSE 'N' END as YAASHS_IN_HARD_PARSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 10)) = POWER(2, 10) THEN 'Y' ELSE 'N' END as YAASHS_IN_SQL_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 11)) = POWER(2, 11) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 12)) = POWER(2, 12) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_RPC,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 13)) = POWER(2, 13) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_COMPILATION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 14)) = POWER(2, 14) THEN 'Y' ELSE 'N' END as YAASHS_IN_JAVA_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 15)) = POWER(2, 15) THEN 'Y' ELSE 'N' END as YAASHS_IN_BIND,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 16)) = POWER(2, 16) THEN 'Y' ELSE 'N' END as YAASHS_IN_CURSOR_CLOSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 17)) = POWER(2, 17) THEN 'Y' ELSE 'N' END as YAASHS_IN_SEQUENCE_LOAD,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 18)) = POWER(2, 18) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_QUERY,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 19)) = POWER(2, 19) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_POPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 20)) = POWER(2, 20) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_PREPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 21)) = POWER(2, 21) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_REPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 22)) = POWER(2, 22) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_TREPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 23)) = POWER(2, 23) THEN 'Y' ELSE 'N' END as YAASHS_IN_TABLESPACE_ENCRYPTION
    FROM
        x$ksuse s,
        x$ksled e,
        x$kslwt w
    WHERE
            bitand(s.ksspaflg, 1) != 0
        AND bitand(s.ksuseflg, 1) != 0
        AND s.indx = w.kslwtsid
        AND w.kslwtevt = e.indx
        AND s.inst_id = USERENV('Instance')]';

    -- V$SESSION structure from Oracle version 18.3 plus additional columns YAASHS_* 
    l_view_definition_180 := 
    q'[    SELECT
        s.addr as SADDR,
        s.indx as SID,
        s.ksuseser as SERIAL#,
        s.ksuudses as AUDSID,
        s.ksusepro as PADDR,
        s.ksuudlui as USER#,
        s.ksuudlna as USERNAME,
        s.ksuudoct as COMMAND,
        s.ksusesow as OWNERID,
        decode(s.ksusetrn, hextoraw('00'), NULL, s.ksusetrn) as TADDR,
        decode(s.ksqpswat, hextoraw('00'), NULL, s.ksqpswat) as LOCKWAIT,
        decode(bitand(s.ksuseidl, 9), 1, 'ACTIVE', 0, decode(bitand(s.ksuseflg, 4096), 0, 'INACTIVE', 'CACHED'), 'KILLED') as STATUS,
        decode(s.ksspatyp, 1, 'DEDICATED', 2, 'SHARED', 3, 'PSEUDO', 4, 'POOLED', 'NONE') as SERVER,
        s.ksuudsid as SCHEMA#,
        s.ksuudsna as SCHEMANAME,
        s.ksuseunm as OSUSER,
        s.ksusepid as PROCESS,
        s.ksusemnm as MACHINE,
        s.ksusemnp as PORT,
        s.ksusetid as TERMINAL,
        s.ksusepnm as PROGRAM,
        decode(bitand(s.ksuseflg, 19), 17, 'BACKGROUND', 1, 'USER', 2, 'RECURSIVE', '?') as TYPE,
        s.ksusesql as SQL_ADDRESS,
        s.ksusesqh as SQL_HASH_VALUE,
        s.ksusesqi as SQL_ID,
        decode(s.ksusesch, 65535, TO_NUMBER(NULL), s.ksusesch) as SQL_CHILD_NUMBER,
        s.ksusesesta as SQL_EXEC_START,
        decode(s.ksuseseid, 0, TO_NUMBER(NULL), s.ksuseseid) as SQL_EXEC_ID,
        s.ksusepsq as PREV_SQL_ADDR,
        s.ksusepha as PREV_HASH_VALUE,
        s.ksusepsi as PREV_SQL_ID,
        decode(s.ksusepch, 65535, TO_NUMBER(NULL), s.ksusepch) as PREV_CHILD_NUMBER,
        s.ksusepesta as PREV_EXEC_START,
        decode(s.ksusepeid, 0, TO_NUMBER(NULL), s.ksusepeid) as PREV_EXEC_ID,
        decode(s.ksusepeo, 0, TO_NUMBER(NULL), s.ksusepeo) as PLSQL_ENTRY_OBJECT_ID,
        decode(s.ksusepeo, 0, TO_NUMBER(NULL), s.ksusepes) as PLSQL_ENTRY_SUBPROGRAM_ID,
        decode(s.ksusepco, 0, TO_NUMBER(NULL), decode(bitand(s.ksusstmbv,power(2, 11)),power(2, 11), s.ksusepco, TO_NUMBER(NULL))) as PLSQL_OBJECT_ID,
        decode(s.ksusepcs, 0, TO_NUMBER(NULL), decode(bitand(s.ksusstmbv,power(2, 11)),power(2, 11), s.ksusepcs, TO_NUMBER(NULL))) as PLSQL_SUBPROGRAM_ID,
        s.ksuseapp as MODULE,
        s.ksuseaph as MODULE_HASH,
        s.ksuseact as ACTION,
        s.ksuseach as ACTION_HASH,
        s.ksusecli as CLIENT_INFO,
        s.ksusefix as FIXED_TABLE_SEQUENCE,
        s.ksuseobj as ROW_WAIT_OBJ#,
        s.ksusefil as ROW_WAIT_FILE#,
        s.ksuseblk as ROW_WAIT_BLOCK#,
        s.ksuseslt as ROW_WAIT_ROW#,
        s.ksuseorafn as TOP_LEVEL_CALL#,
        s.ksuseltm as LOGON_TIME,
        s.ksusectm as LAST_CALL_ET,
        decode(bitand(s.ksusepxopt, 12), 0, 'NO', 'YES') as PDML_ENABLED,
        decode(s.ksuseft, 2, 'SESSION', 4,'SELECT', 8, 'TRANSACTIONAL', 'NONE') as FAILOVER_TYPE,
        decode(s.ksusefm, 1, 'BASIC', 2, 'PRECONNECT', 4, 'PREPARSE', 'NONE') as FAILOVER_METHOD,
        decode(s.ksusefs, 1, 'YES', 'NO') as FAILED_OVER,
        s.ksusegrp as RESOURCE_CONSUMER_GROUP,
        decode(bitand(s.ksusepxopt, 4), 4, 'ENABLED', decode(bitand(s.ksusepxopt, 8),8, 'FORCED', 'DISABLED')) as PDML_STATUS,
        decode(bitand(s.ksusepxopt, 2), 2, 'FORCED', decode(bitand(s.ksusepxopt, 1),1, 'DISABLED', 'ENABLED')) as PDDL_STATUS,
        decode(bitand(s.ksusepxopt, 32), 32, 'FORCED', decode(bitand(s.ksusepxopt, 16),16, 'DISABLED', 'ENABLED')) as PQ_STATUS,
        s.ksusecqd as CURRENT_QUEUE_DURATION,
        s.ksuseclid as CLIENT_IDENTIFIER,
        decode(s.ksuseblocker, 4294967295, 'UNKNOWN', 4294967294, 'UNKNOWN', 4294967293, 'UNKNOWN', 4294967292, 'NO HOLDER', 4294967291, 'NOT IN WAIT', 'VALID') as BLOCKING_SESSION_STATUS,
        decode(s.ksuseblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksuseblocker, 2147418112) / 65536) as BLOCKING_INSTANCE,
        decode(s.ksuseblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksuseblocker, 65535)) as BLOCKING_SESSION,
        decode(s.ksusefblocker, 4294967295, 'UNKNOWN', 4294967294, 'UNKNOWN', 4294967293, 'UNKNOWN', 4294967292, 'NO HOLDER', 4294967291, 'NOT IN WAIT', 'VALID') as FINAL_BLOCKING_SESSION_STATUS,
        decode(s.ksusefblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksusefblocker, 2147418112) / 65536) as FINAL_BLOCKING_INSTANCE,
        decode(s.ksusefblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksusefblocker, 65535)) as FINAL_BLOCKING_SESSION,
        w.kslwtseq as SEQ#,
        w.kslwtevt as EVENT#,
        e.kslednam as EVENT,
        e.ksledp1 as P1TEXT,
        w.kslwtp1 as P1,
        w.kslwtp1r as P1RAW,
        e.ksledp2 as P2TEXT,
        w.kslwtp2 as P2,
        w.kslwtp2r as P2RAW,
        e.ksledp3 as P3TEXT,
        w.kslwtp3 as P3,
        w.kslwtp3r as P3RAW,
        e.ksledclassid as WAIT_CLASS_ID,
        e.ksledclass# as WAIT_CLASS#,
        e.ksledclass as WAIT_CLASS,
        decode(w.kslwtinwait, 0, decode(bitand(w.kslwtflags, 256), 0, - 2, decode(round(w.kslwtstime / 10000), 0,- 1, round(w.kslwtstime / 10000))), 0) as WAIT_TIME,
        decode(w.kslwtinwait, 0, round((w.kslwtstime + w.kslwtltime) / 1000000), round(w.kslwtstime / 1000000)) as SECONDS_IN_WAIT, 
        decode(w.kslwtinwait, 1, 'WAITING', decode(bitand(w.kslwtflags, 256), 0, 'WAITED UNKNOWN TIME', decode(round(w.kslwtstime / 10000), 0, 'WAITED SHORT TIME', 'WAITED KNOWN TIME'))) as STATE,
        w.kslwtstime as WAIT_TIME_MICRO,
        decode(w.kslwtinwait, 0, TO_NUMBER(NULL), decode(bitand(w.kslwtflags, 64), 64, 0, w.kslwttrem)) as TIME_REMAINING_MICRO,
        w.kslwtltime as TIME_SINCE_LAST_WAIT_MICRO,
        s.ksusesvc as SERVICE_NAME,
        decode(bitand(s.ksuseflg2, 32), 32, 'ENABLED', 'DISABLED') as SQL_TRACE,
        decode(bitand(s.ksuseflg2, 64), 64, 'TRUE', 'FALSE') as SQL_TRACE_WAITS,
        decode(bitand(s.ksuseflg2, 128), 128, 'TRUE', 'FALSE') as SQL_TRACE_BINDS,
        decode(bitand(s.ksuseflg2, 65536) + bitand(s.ksuseflg2, 131072), 65536, 'ALL EXEC', 131072, 'NEVER', 0, 'FIRST EXEC') as SQL_TRACE_PLAN_STATS,
        s.ksuudsae as SESSION_EDITION_ID,
        s.ksusecre as CREATOR_ADDR,
        s.ksusecsn as CREATOR_SERIAL#,
        s.ksuseecid as ECID,
        s.ksuudtxlp as SQL_TRANSLATION_PROFILE_ID,
        ( s.ksusepgaman + s.ksusepgaauto ) * 1024 as PGA_TUNABLE_MEM,
        decode(bitand(s.ksuudflg, 512), 512, 'ENABLED', 'DISABLED') as SHARD_DDL_STATUS,
        s.con_id as CON_ID,
        s.ksusexnm as EXTERNAL_NAME,
        decode(bitand(s.ksuseflg3, 2048), 2048, 'TRUE', 'FALSE') as PLSQL_DEBUGGER_CONNECTED,
        -- Following column definitions are extracted from Tanel Poder's tpt-oracle Github repository
        s.ksusesph as YAASHS_SQL_PLAN_HASH_VALUE,
        s.ksusstmbv as YAASHS_TIME_MODEL,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 03)) = POWER(2, 03) THEN 'Y' ELSE 'N' END as YAASHS_IN_CONNECTION_MGMT,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 04)) = POWER(2, 04) THEN 'Y' ELSE 'N' END as YAASHS_IN_PARSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 07)) = POWER(2, 07) THEN 'Y' ELSE 'N' END as YAASHS_IN_HARD_PARSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 10)) = POWER(2, 10) THEN 'Y' ELSE 'N' END as YAASHS_IN_SQL_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 11)) = POWER(2, 11) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 12)) = POWER(2, 12) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_RPC,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 13)) = POWER(2, 13) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_COMPILATION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 14)) = POWER(2, 14) THEN 'Y' ELSE 'N' END as YAASHS_IN_JAVA_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 15)) = POWER(2, 15) THEN 'Y' ELSE 'N' END as YAASHS_IN_BIND,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 16)) = POWER(2, 16) THEN 'Y' ELSE 'N' END as YAASHS_IN_CURSOR_CLOSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 17)) = POWER(2, 17) THEN 'Y' ELSE 'N' END as YAASHS_IN_SEQUENCE_LOAD,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 18)) = POWER(2, 18) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_QUERY,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 19)) = POWER(2, 19) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_POPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 20)) = POWER(2, 20) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_PREPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 21)) = POWER(2, 21) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_REPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 22)) = POWER(2, 22) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_TREPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 23)) = POWER(2, 23) THEN 'Y' ELSE 'N' END as YAASHS_IN_TABLESPACE_ENCRYPTION
    FROM
        x$ksuse s,
        x$ksled e,
        x$kslwt w
    WHERE
            bitand(s.ksspaflg, 1) != 0
        AND bitand(s.ksuseflg, 1) != 0
        AND s.indx = w.kslwtsid
        AND w.kslwtevt = e.indx
        AND s.inst_id = USERENV('Instance')]';

    -- V$SESSION structure from Oracle version 19.11 plus additional columns YAASHS_* 
    l_view_definition_190 := 
    q'[    SELECT
        s.addr as SADDR,
        s.indx as SID,
        s.ksuseser as SERIAL#,
        s.ksuudses as AUDSID,
        s.ksusepro as PADDR,
        s.ksuudlui as USER#,
        s.ksuudlna as USERNAME,
        s.ksuudoct as COMMAND,
        s.ksusesow as OWNERID,
        decode(s.ksusetrn, hextoraw('00'), NULL, s.ksusetrn) as TADDR,
        decode(s.ksqpswat, hextoraw('00'), NULL, s.ksqpswat) as LOCKWAIT,
        decode(bitand(s.ksuseidl, 9), 1, 'ACTIVE', 0, decode(bitand(s.ksuseflg, 4096), 0, 'INACTIVE', 'CACHED'), 'KILLED') as STATUS,
        decode(s.ksspatyp, 1, 'DEDICATED', 2, 'SHARED', 3, 'PSEUDO', 4, 'POOLED', 'NONE') as SERVER,
        s.ksuudsid as SCHEMA#,
        s.ksuudsna as SCHEMANAME,
        s.ksuseunm as OSUSER,
        s.ksusepid as PROCESS,
        s.ksusemnm as MACHINE,
        s.ksusemnp as PORT,
        s.ksusetid as TERMINAL,
        s.ksusepnm as PROGRAM,
        decode(bitand(s.ksuseflg, 19), 17, 'BACKGROUND', 1, 'USER', 2, 'RECURSIVE', '?') as TYPE,
        s.ksusesql as SQL_ADDRESS,
        s.ksusesqh as SQL_HASH_VALUE,
        s.ksusesqi as SQL_ID,
        decode(s.ksusesch, 65535, TO_NUMBER(NULL), s.ksusesch) as SQL_CHILD_NUMBER,
        s.ksusesesta as SQL_EXEC_START,
        decode(s.ksuseseid, 0, TO_NUMBER(NULL), s.ksuseseid) as SQL_EXEC_ID,
        s.ksusepsq as PREV_SQL_ADDR,
        s.ksusepha as PREV_HASH_VALUE,
        s.ksusepsi as PREV_SQL_ID,
        decode(s.ksusepch, 65535, TO_NUMBER(NULL), s.ksusepch) as PREV_CHILD_NUMBER,
        s.ksusepesta as PREV_EXEC_START,
        decode(s.ksusepeid, 0, TO_NUMBER(NULL), s.ksusepeid) as PREV_EXEC_ID,
        decode(s.ksusepeo, 0, TO_NUMBER(NULL), s.ksusepeo) as PLSQL_ENTRY_OBJECT_ID,
        decode(s.ksusepeo, 0, TO_NUMBER(NULL), s.ksusepes) as PLSQL_ENTRY_SUBPROGRAM_ID,
        decode(s.ksusepco, 0, TO_NUMBER(NULL), decode(bitand(s.ksusstmbv,power(2, 11)),power(2, 11), s.ksusepco, TO_NUMBER(NULL))) as PLSQL_OBJECT_ID,
        decode(s.ksusepcs, 0, TO_NUMBER(NULL), decode(bitand(s.ksusstmbv,power(2, 11)),power(2, 11), s.ksusepcs, TO_NUMBER(NULL))) as PLSQL_SUBPROGRAM_ID,
        s.ksuseapp as MODULE,
        s.ksuseaph as MODULE_HASH,
        s.ksuseact as ACTION,
        s.ksuseach as ACTION_HASH,
        s.ksusecli as CLIENT_INFO,
        s.ksusefix as FIXED_TABLE_SEQUENCE,
        s.ksuseobj as ROW_WAIT_OBJ#,
        s.ksusefil as ROW_WAIT_FILE#,
        s.ksuseblk as ROW_WAIT_BLOCK#,
        s.ksuseslt as ROW_WAIT_ROW#,
        s.ksuseorafn as TOP_LEVEL_CALL#,
        s.ksuseltm as LOGON_TIME,
        s.ksusectm as LAST_CALL_ET,
        decode(bitand(s.ksusepxopt, 12), 0, 'NO', 'YES') as PDML_ENABLED,
        decode(s.ksuseft, 2, 'SESSION', 4,'SELECT', 8, 'TRANSACTIONAL', 32, 'AUTO', 'NONE') as FAILOVER_TYPE,
        decode(s.ksusefm, 1, 'BASIC', 2, 'PRECONNECT', 4, 'PREPARSE', 'NONE') as FAILOVER_METHOD,
        decode(s.ksusefs, 1, 'YES', 'NO') as FAILED_OVER,
        s.ksusegrp as RESOURCE_CONSUMER_GROUP,
        decode(bitand(s.ksusepxopt, 4), 4, 'ENABLED', decode(bitand(s.ksusepxopt, 8),8, 'FORCED', 'DISABLED')) as PDML_STATUS,
        decode(bitand(s.ksusepxopt, 2), 2, 'FORCED', decode(bitand(s.ksusepxopt, 1),1, 'DISABLED', 'ENABLED')) as PDDL_STATUS,
        decode(bitand(s.ksusepxopt, 32), 32, 'FORCED', decode(bitand(s.ksusepxopt, 16),16, 'DISABLED', 'ENABLED')) as PQ_STATUS,
        s.ksusecqd as CURRENT_QUEUE_DURATION,
        s.ksuseclid as CLIENT_IDENTIFIER,
        decode(s.ksuseblocker, 4294967295, 'UNKNOWN', 4294967294, 'UNKNOWN', 4294967293, 'UNKNOWN', 4294967292, 'NO HOLDER', 4294967291, 'NOT IN WAIT', 'VALID') as BLOCKING_SESSION_STATUS,
        decode(s.ksuseblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksuseblocker, 2147221504) / 262144) as BLOCKING_INSTANCE,
        decode(s.ksuseblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksuseblocker, 262143)) as BLOCKING_SESSION,
        decode(s.ksusefblocker, 4294967295, 'UNKNOWN', 4294967294, 'UNKNOWN', 4294967293, 'UNKNOWN', 4294967292, 'NO HOLDER', 4294967291, 'NOT IN WAIT', 'VALID') as FINAL_BLOCKING_SESSION_STATUS,
        decode(s.ksusefblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksusefblocker, 2147221504) / 262144) as FINAL_BLOCKING_INSTANCE,
        decode(s.ksusefblocker, 4294967295, TO_NUMBER(NULL), 4294967294, TO_NUMBER(NULL), 4294967293, TO_NUMBER(NULL), 4294967292, TO_NUMBER(NULL), 4294967291, TO_NUMBER(NULL), bitand(s.ksusefblocker, 262143)) as FINAL_BLOCKING_SESSION,
        w.kslwtseq as SEQ#,
        w.kslwtevt as EVENT#,
        e.kslednam as EVENT,
        e.ksledp1 as P1TEXT,
        w.kslwtp1 as P1,
        w.kslwtp1r as P1RAW,
        e.ksledp2 as P2TEXT,
        w.kslwtp2 as P2,
        w.kslwtp2r as P2RAW,
        e.ksledp3 as P3TEXT,
        w.kslwtp3 as P3,
        w.kslwtp3r as P3RAW,
        e.ksledclassid as WAIT_CLASS_ID,
        e.ksledclass# as WAIT_CLASS#,
        e.ksledclass as WAIT_CLASS,
        decode(w.kslwtinwait, 0, decode(bitand(w.kslwtflags, 256), 0, - 2, decode(round(w.kslwtstime / 10000), 0,- 1, round(w.kslwtstime / 10000))), 0) as WAIT_TIME,
        decode(w.kslwtinwait, 0, round((w.kslwtstime + w.kslwtltime) / 1000000), round(w.kslwtstime / 1000000)) as SECONDS_IN_WAIT, 
        decode(w.kslwtinwait, 1, 'WAITING', decode(bitand(w.kslwtflags, 256), 0, 'WAITED UNKNOWN TIME', decode(round(w.kslwtstime / 10000), 0, 'WAITED SHORT TIME', 'WAITED KNOWN TIME'))) as STATE,
        w.kslwtstime as WAIT_TIME_MICRO,
        decode(w.kslwtinwait, 0, TO_NUMBER(NULL), decode(bitand(w.kslwtflags, 64), 64, 0, w.kslwttrem)) as TIME_REMAINING_MICRO,
        w.kslwtltime as TIME_SINCE_LAST_WAIT_MICRO,
        s.ksusesvc as SERVICE_NAME,
        decode(bitand(s.ksuseflg2, 32), 32, 'ENABLED', 'DISABLED') as SQL_TRACE,
        decode(bitand(s.ksuseflg2, 64), 64, 'TRUE', 'FALSE') as SQL_TRACE_WAITS,
        decode(bitand(s.ksuseflg2, 128), 128, 'TRUE', 'FALSE') as SQL_TRACE_BINDS,
        decode(bitand(s.ksuseflg2, 65536) + bitand(s.ksuseflg2, 131072), 65536, 'ALL EXEC', 131072, 'NEVER', 0, 'FIRST EXEC') as SQL_TRACE_PLAN_STATS,
        s.ksuudsae as SESSION_EDITION_ID,
        s.ksusecre as CREATOR_ADDR,
        s.ksusecsn as CREATOR_SERIAL#,
        s.ksuseecid as ECID,
        s.ksuudtxlp as SQL_TRANSLATION_PROFILE_ID,
        ( s.ksusepgaman + s.ksusepgaauto ) * 1024 as PGA_TUNABLE_MEM,
        decode(bitand(s.ksuudflg, 512), 512, 'ENABLED', 'DISABLED') as SHARD_DDL_STATUS,
        s.con_id as CON_ID,
        s.ksusexnm as EXTERNAL_NAME,
        decode(bitand(s.ksuseflg3, 2048), 2048, 'TRUE', 'FALSE') as PLSQL_DEBUGGER_CONNECTED,
        -- Following column definitions are extracted from Tanel Poder's tpt-oracle Github repository
        s.ksusesph as YAASHS_SQL_PLAN_HASH_VALUE,
        s.ksusstmbv as YAASHS_TIME_MODEL,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 03)) = POWER(2, 03) THEN 'Y' ELSE 'N' END as YAASHS_IN_CONNECTION_MGMT,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 04)) = POWER(2, 04) THEN 'Y' ELSE 'N' END as YAASHS_IN_PARSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 07)) = POWER(2, 07) THEN 'Y' ELSE 'N' END as YAASHS_IN_HARD_PARSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 10)) = POWER(2, 10) THEN 'Y' ELSE 'N' END as YAASHS_IN_SQL_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 11)) = POWER(2, 11) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 12)) = POWER(2, 12) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_RPC,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 13)) = POWER(2, 13) THEN 'Y' ELSE 'N' END as YAASHS_IN_PLSQL_COMPILATION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 14)) = POWER(2, 14) THEN 'Y' ELSE 'N' END as YAASHS_IN_JAVA_EXECUTION,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 15)) = POWER(2, 15) THEN 'Y' ELSE 'N' END as YAASHS_IN_BIND,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 16)) = POWER(2, 16) THEN 'Y' ELSE 'N' END as YAASHS_IN_CURSOR_CLOSE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 17)) = POWER(2, 17) THEN 'Y' ELSE 'N' END as YAASHS_IN_SEQUENCE_LOAD,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 18)) = POWER(2, 18) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_QUERY,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 19)) = POWER(2, 19) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_POPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 20)) = POWER(2, 20) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_PREPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 21)) = POWER(2, 21) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_REPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 22)) = POWER(2, 22) THEN 'Y' ELSE 'N' END as YAASHS_IN_INMEMORY_TREPOPULATE,
        CASE WHEN BITAND(s.ksusstmbv, POWER(2, 23)) = POWER(2, 23) THEN 'Y' ELSE 'N' END as YAASHS_IN_TABLESPACE_ENCRYPTION
    FROM
        x$ksuse s,
        x$ksled e,
        x$kslwt w
    WHERE
            bitand(s.ksspaflg, 1) != 0
        AND bitand(s.ksuseflg, 1) != 0
        AND s.indx = w.kslwtsid
        AND w.kslwtevt = e.indx
        AND s.inst_id = USERENV('Instance')]';

    INSERT INTO yaashsr.advanced_view_def(version,view_definition) VALUES ('11.2',l_view_definition_112);
    INSERT INTO yaashsr.advanced_view_def(version,view_definition) VALUES ('12.1',l_view_definition_121);
    INSERT INTO yaashsr.advanced_view_def(version,view_definition) VALUES ('12.2',l_view_definition_122);
    INSERT INTO yaashsr.advanced_view_def(version,view_definition) VALUES ('18.0',l_view_definition_180);
    INSERT INTO yaashsr.advanced_view_def(version,view_definition) VALUES ('19.0',l_view_definition_190);
    COMMIT;
END;
/

---------------------------------------------------------------------------------------------
-- PL/SQL packages
---------------------------------------------------------------------------------------------
@./plsql/repo.pks
@./plsql/repo.pkb
@./plsql/ashs.pks
@./plsql/ashs.pkb
-- utPLSQL unit testing (not needed for production but for development deployments)
-- @./plsql/ut_yaashs.pks
-- @./plsql/ut_yaashs.pkb
EXEC dbms_utility.compile_schema(schema => 'YAASHSR', compile_all=> TRUE);

---------------------------------------------------------------------------------------------
-- Default jobs
---------------------------------------------------------------------------------------------
EXEC dbms_scheduler.create_job(job_name => 'yaashsr.yaashs_repo_maintenance', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN repo.repo_maintenance(); END;', repeat_interval => 'FREQ=DAILY;BYHOUR=0;BYMINUTE=0;BYSECOND=1', enabled=> TRUE);

quit;
